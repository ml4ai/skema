# coding: utf-8

"""
    Grounded Model Exchange (GroMEt) schema for Function Networks

    This document defines the GroMEt Function Network data model. Note that Metadata is defined in separate spec.  __Using Swagger to Generate Class Structure__  To automatically generate Python or Java models corresponding to this document, you can use [swagger-codegen](https://swagger.io/tools/swagger-codegen/). This can be used to generate the client code based off of this spec, and in the process this will generate the data model class structure.  1. Install via the method described for your operating system    [here](https://github.com/swagger-api/swagger-codegen#Prerequisites).    Make sure to install a version after 3.0 that will support openapi 3. 2. Run swagger-codegen with the options in the example below.    The URL references where the yaml for this documentation is stored on    github. Make sure to replace CURRENT_VERSION with the correct version.    (The current version is `0.1.7`.)    To generate Java classes rather, change the `-l python` to `-l java`.    Change the value to the `-o` option to the desired output location.    ```    swagger-codegen generate -l python -o ./client -i https://raw.githubusercontent.com/ml4ai/automates-v2/master/docs/source/gromet_FN_v{CURRENT_VERSION}.yaml    ``` 3. Once it executes, the client code will be generated at your specified    location.    For python, the classes will be located in    `$OUTPUT_PATH/swagger_client/models/`.    For java, they will be located in    `$OUTPUT_PATH/src/main/java/io/swagger/client/model/`  If generating GroMEt schema data model classes in SKEMA (AutoMATES), then after generating the above, follow the instructions here: ``` <automates>/automates/model_assembly/gromet/model/README.md ```   # noqa: E501

    OpenAPI spec version: 0.1.9
    Contact: claytonm@arizona.edu
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LiteralValue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'value_type': 'str',
        'value': 'object',
        'source_fn': 'int',
        'import_type': 'ImportType',
        'import_version': 'str',
        'import_source': 'TypedValue',
        'source_language': 'str',
        'source_language_version': 'str',
        'gromet_type': 'str'
    }

    attribute_map = {
        'value_type': 'value_type',
        'value': 'value',
        'source_fn': 'source_fn',
        'import_type': 'import_type',
        'import_version': 'import_version',
        'import_source': 'import_source',
        'source_language': 'source_language',
        'source_language_version': 'source_language_version',
        'gromet_type': 'gromet_type'
    }

    def __init__(self, value_type=None, value=None, source_fn=None, import_type=None, import_version=None, import_source=None, source_language=None, source_language_version=None, gromet_type='LiteralValue'):  # noqa: E501
        """LiteralValue - a model defined in Swagger"""  # noqa: E501
        self._value_type = None
        self._value = None
        self._source_fn = None
        self._import_type = None
        self._import_version = None
        self._import_source = None
        self._source_language = None
        self._source_language_version = None
        self._gromet_type = None
        self.discriminator = None
        if value_type is not None:
            self.value_type = value_type
        if value is not None:
            self.value = value
        if source_fn is not None:
            self.source_fn = source_fn
        if import_type is not None:
            self.import_type = import_type
        if import_version is not None:
            self.import_version = import_version
        if import_source is not None:
            self.import_source = import_source
        if source_language is not None:
            self.source_language = source_language
        if source_language_version is not None:
            self.source_language_version = source_language_version
        if gromet_type is not None:
            self.gromet_type = gromet_type

    @property
    def value_type(self):
        """Gets the value_type of this LiteralValue.  # noqa: E501

        The type of the value.   # noqa: E501

        :return: The value_type of this LiteralValue.  # noqa: E501
        :rtype: str
        """
        return self._value_type

    @value_type.setter
    def value_type(self, value_type):
        """Sets the value_type of this LiteralValue.

        The type of the value.   # noqa: E501

        :param value_type: The value_type of this LiteralValue.  # noqa: E501
        :type: str
        """

        self._value_type = value_type

    @property
    def value(self):
        """Gets the value of this LiteralValue.  # noqa: E501

        The value as an object representing the value. Interpret the value object according to the value_type.   # noqa: E501

        :return: The value of this LiteralValue.  # noqa: E501
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this LiteralValue.

        The value as an object representing the value. Interpret the value object according to the value_type.   # noqa: E501

        :param value: The value of this LiteralValue.  # noqa: E501
        :type: object
        """

        self._value = value

    @property
    def source_fn(self):
        """Gets the source_fn of this LiteralValue.  # noqa: E501

        Integer representing index into the fn_array   # noqa: E501

        :return: The source_fn of this LiteralValue.  # noqa: E501
        :rtype: int
        """
        return self._source_fn

    @source_fn.setter
    def source_fn(self, source_fn):
        """Sets the source_fn of this LiteralValue.

        Integer representing index into the fn_array   # noqa: E501

        :param source_fn: The source_fn of this LiteralValue.  # noqa: E501
        :type: int
        """

        self._source_fn = source_fn

    @property
    def import_type(self):
        """Gets the import_type of this LiteralValue.  # noqa: E501


        :return: The import_type of this LiteralValue.  # noqa: E501
        :rtype: ImportType
        """
        return self._import_type

    @import_type.setter
    def import_type(self, import_type):
        """Sets the import_type of this LiteralValue.


        :param import_type: The import_type of this LiteralValue.  # noqa: E501
        :type: ImportType
        """

        self._import_type = import_type

    @property
    def import_version(self):
        """Gets the import_version of this LiteralValue.  # noqa: E501

        When value_type is \"literal_function_imported\": the version of the resource being imported (e.g., \"Numpy 1.23.0\")   # noqa: E501

        :return: The import_version of this LiteralValue.  # noqa: E501
        :rtype: str
        """
        return self._import_version

    @import_version.setter
    def import_version(self, import_version):
        """Sets the import_version of this LiteralValue.

        When value_type is \"literal_function_imported\": the version of the resource being imported (e.g., \"Numpy 1.23.0\")   # noqa: E501

        :param import_version: The import_version of this LiteralValue.  # noqa: E501
        :type: str
        """

        self._import_version = import_version

    @property
    def import_source(self):
        """Gets the import_source of this LiteralValue.  # noqa: E501


        :return: The import_source of this LiteralValue.  # noqa: E501
        :rtype: TypedValue
        """
        return self._import_source

    @import_source.setter
    def import_source(self, import_source):
        """Sets the import_source of this LiteralValue.


        :param import_source: The import_source of this LiteralValue.  # noqa: E501
        :type: TypedValue
        """

        self._import_source = import_source

    @property
    def source_language(self):
        """Gets the source_language of this LiteralValue.  # noqa: E501

        When function_type is SOURCE or IMPORTED: The source language base name (e.g., \"Python\", \"C\", \"Fortran\")   # noqa: E501

        :return: The source_language of this LiteralValue.  # noqa: E501
        :rtype: str
        """
        return self._source_language

    @source_language.setter
    def source_language(self, source_language):
        """Sets the source_language of this LiteralValue.

        When function_type is SOURCE or IMPORTED: The source language base name (e.g., \"Python\", \"C\", \"Fortran\")   # noqa: E501

        :param source_language: The source_language of this LiteralValue.  # noqa: E501
        :type: str
        """

        self._source_language = source_language

    @property
    def source_language_version(self):
        """Gets the source_language_version of this LiteralValue.  # noqa: E501

        When function_type is SOURCE or IMPORTED: The version of the source language (e.g., \"3.10.9\")   # noqa: E501

        :return: The source_language_version of this LiteralValue.  # noqa: E501
        :rtype: str
        """
        return self._source_language_version

    @source_language_version.setter
    def source_language_version(self, source_language_version):
        """Sets the source_language_version of this LiteralValue.

        When function_type is SOURCE or IMPORTED: The version of the source language (e.g., \"3.10.9\")   # noqa: E501

        :param source_language_version: The source_language_version of this LiteralValue.  # noqa: E501
        :type: str
        """

        self._source_language_version = source_language_version

    @property
    def gromet_type(self):
        """Gets the gromet_type of this LiteralValue.  # noqa: E501


        :return: The gromet_type of this LiteralValue.  # noqa: E501
        :rtype: str
        """
        return self._gromet_type

    @gromet_type.setter
    def gromet_type(self, gromet_type):
        """Sets the gromet_type of this LiteralValue.


        :param gromet_type: The gromet_type of this LiteralValue.  # noqa: E501
        :type: str
        """

        self._gromet_type = gromet_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LiteralValue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LiteralValue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

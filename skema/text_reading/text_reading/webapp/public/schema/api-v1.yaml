openapi: 3.0.0
info:
  version: "1.0.5"
  title: SEC Reader API
  description: RESTful API exposing core functionality of sec reader.
  contact:
    email: ghp@lum.ai
# https://swagger.io/docs/specification/api-host-and-base-path/
servers:
 #- url: "http://localhost:9000/api"
 - url: /api/odin
tags:
  - name: "sec"
    description: |
      Operations specific to SEC project.
  - name: "config"
    description: |
      Endpoints for inspecting project config.
#  - name: "ie"
#    description: |
#      Operations related to information extraction.
#  - name: "taxo"
#    description: |
#      Operations related to the taxonomy.
paths:
  /buildinfo:
    get:
      tags:
        - "config"
      summary: Information about the current version of this app.
      description: Provides detailed build information about the currently running app.
      operationId: buildinfo
      parameters:
        - name: pretty
          in: query
          description: |
            Whether or not to pretty print the response.
          required: false
          schema:
            type: boolean
            example: true
      responses:
        '200':
          description: "A JSON object containing build information."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildInfo'

#  /rules:
#    get:
#      tags:
#        - ie
#      summary: |
#        Show rules currently being used by system.
#      description: |
#        Show rules currently being used by system.
#      responses:
#        '200':
#          description: Rules as YAML.
#          content:
#          text/plain:
#            schema:
#              type: string
    
#  /taxonomy/hyponyms-for:
#    get:
#      tags:
#        - taxo
#      summary: |
#        Hyponyms for the given label.
#      description: |
#        Hyponyms for the given label.
#      parameters:
#        - name: term
#          in: query
#          description: |
#            Parent label.
#          required: true
#          schema:
#            type: string
#      responses:
#        '200':
#          description: Hyponyms of the provided label.
#          content:
#            application/json:
#              schema:
#                type: array
#                description: |
#                  The hyponyms of the provided label.  Final element is the provided label.
#                items:
#                  type: string

#  /taxonomy/hypernyms-for:
#    get:
#      tags:
#        - taxo
#      summary: |
#        Hypernyms of the given label.
#      description: |
#        Hypernyms of the given label.
#      parameters:
#        - name: term
#          in: query
#          description: |
#            Child's label.
#          required: true
#          schema:
#            type: string
#      responses:
#        '200':
#          description: Hypernyms of the provided label.  First element is the provided label.
#          content:
#            application/json:
#              schema:
#                type: array
#                description: |
#                  The hypernyms of the provided label.
#                items:
#                  type: string

          
#  /extract:
#    get:
#      tags:
#        - ie
#      summary: |
#        Extract Odin Mentions from text.
#      description: |
#        Extract Odin Mentions from text.
#      parameters:
#        - name: text
#          in: query
#          description: |
#            The text to be analyzed.
#          required: true
#          schema:
#            type: string
#        #  example:
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/MentionData"
#    post:
#      tags:
#        - "ie"
#      summary: |
#        Accepts raw text and extracts Odin Mentions.
#      description: |
#        Accepts raw text JSON and extracts Odin Mentions.
#      requestBody:
#        description: |
#          raw text to process.
#        required: true
#        content:
#          text/plain:
#            schema:
#              type: string
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/MentionData"

#  /extract/{label}:
#    post:
#      tags:
#        - "ie"
#      summary: |
#        Accepts raw text and extracts Odin Mentions.
#      description: |
#        Accepts raw text JSON and extracts Odin Mentions.
#      parameters:
#        - name: label
#          in: path
#          description: A mention label to retain. Includes all of that label's hyponyms (i.e., children in the taxonomy)
#          required: true
#          type: string
#      requestBody:
#        description: |
#          raw text to process.
#        required: true
#        content:
#          text/plain:
#            schema:
#              type: string
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/MentionData"

  # simple extract
#  /simple/extract:
#    get:
#      tags:
#        - ie
#      summary: |
#        Extract simplified Odin Mentions from text.
#      description: |
#        Extract simplified Odin Mentions from text.
#      parameters:
#        - name: text
#          in: query
#          description: |
#            The text to be analyzed.
#          required: true
#          schema:
#            type: string
#        #  example:
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/SimpleMentionData"
#    post:
#      tags:
#        - "ie"
#      summary: |
#        Accepts raw text and extracts Odin Mentions.
#      description: |
#        Accepts raw text JSON and extracts Odin Mentions.
#      requestBody:
#        description: |
#          raw text to process.
#        required: true
#        content:
#          text/plain:
#            schema:
#              type: string
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/SimpleMentionData"

#  /simple/extract/{label}:
#    post:
#      tags:
#        - "ie"
#      summary: |
#        Accepts raw text and extracts simplified Odin Mentions.
#      description: |
#        Accepts raw text JSON and extracts simplified Odin Mentions.
#      parameters:
#        - name: label
#          in: path
#          description: A mention label to retain. Includes all of that label's hyponyms (i.e., children in the taxonomy)
#          required: true
#          type: string
#      requestBody:
#        description: |
#          raw text to process.
#        required: true
#        content:
#          text/plain:
#            schema:
#              type: string
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/SimpleMentionData"

#  /extract-from-doc:
#    post:
#      tags:
#        - "ie"
#      summary: |
#        Accepts `org.clulab.processors.Document` JSON and extracts Odin Mentions.
#      description: |
#        Accepts `org.clulab.processors.Document` JSON and extracts Odin Mentions.
#      requestBody:
#        description: |
#          `org.clulab.processors.Document`
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/Document"
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/MentionData"

#  /extract-from-doc/{label}:
#    post:
#      tags:
#        - "ie"
#      summary: |
#        Accepts `org.clulab.processors.Document` JSON and extracts Odin Mentions.
#      description: |
#        Accepts `org.clulab.processors.Document` JSON and extracts Odin Mentions.
#      parameters:
#        - name: label
#          in: path
#          description: A mention label to retain. Includes all of that label's hyponyms (i.e., children in the taxonomy)
#          required: true
#          type: string
#      requestBody:
#        description: |
#          `org.clulab.processors.Document`
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/Document"
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/MentionData"

#  /simple/extract-from-doc:
#    post:
#      tags:
#        - "ie"
#      summary: |
#        Accepts `org.clulab.processors.Document` JSON and extracts simplified forms of Odin Mentions.
#      description: |
#        Accepts `org.clulab.processors.Document` JSON and extracts simplified forms of Odin Mentions.
#      requestBody:
#        description: |
#          `org.clulab.processors.Document`
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/Document"
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/SimpleMentionData"

#  /simple/extract-from-doc/{label}:
#    post:
#      tags:
#        - "ie"
#      summary: |
#        Accepts `org.clulab.processors.Document` JSON and extracts simplified forms of Odin Mentions.
#      description: |
#        Accepts `org.clulab.processors.Document` JSON and extracts simplified forms of Odin Mentions.
#      parameters:
#        - name: label
#          in: path
#          description: A mention label to retain. Includes all of that label's hyponyms (i.e., children in the taxonomy)
#          required: true
#          type: string
#      requestBody:
#        description: |
#          `org.clulab.processors.Document`
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: "#/components/schemas/Document"
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/SimpleMentionData"

  /extract-from-convo-text:
    post:
      tags:
        - "sec"
      summary: |
        Accepts a conversation string in rev.ai text format along with a potential json metadata string and extracts variables.
      description: |
        Accepts a conversation string in rev.ai text format along with a potential json metadata string and extracts variables.
      parameters:
        - name: metadata
          in: query
          description: Additional information about the conversation including possible name and field details that can be used as custom vocabulary
          required: false
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Metadata"
      requestBody:
        description: |
          Conversation text to process.
        required: true
        content:
          text/plain:
            schema:
              type: string
              example: |
                Speaker 0    00:04:39    And what's the capacity of those barns?
                Speaker 1    00:04:42    Um, main or elevator is, uh, 2,800 nursery and over 6,000 finishing.
                Speaker 0    00:04:56    Okay.
                Speaker 1    00:04:57    And then main farm is I have to think on this one 1300 nursery, 4 4500 finishing 192 faring and 1100 Souths gestation.
      responses:
        '200':
          description: Mentions matching the criteria.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValueUnits"

  /extract-from-convo-file:
    post:
      tags:
        - "sec"
      summary: |
        Accepts a conversation file in rev.ai text format along with a json metadata file and extracts variables.
      description: |
        Accepts a conversation file in rev.ai text format along with a json metadata file and extracts variables.
      requestBody:
        description: |
          Conversation and metadata files to process.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - conversation
              properties:
                conversation:
                  type: string
                  description: Conversation text to process
                  format: base64
                metadata:
                  type: string
                  description: Additional information about the conversation including possible name and field details that can be used as custom vocabulary
                  format: base64
      responses:
        '200':
          description: Mentions matching the criteria.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValueUnits"

  /extract-from-supplement-file:
    post:
      tags:
        - "sec"
      summary: |
        Accepts a supplement file (doc, docx, html email, pdf, txt, xls, xlsx) along with a json metadata file and extracts variables.
      description: |
        Accepts a supplement file (doc, docx, html email, pdf, txt, xls, xlsx) along with a json metadata file and extracts variables.
      requestBody:
        description: |
          Supplement and metadata files to process.
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - supplement
              properties:
                supplement:
                  type: string
                  description: Supplement file (doc, docx, html email, pdf, txt, xls, xlsx) to process
                  format: base64
                metadata:
                  type: string
                  description: Additional information about the conversation including possible name and field details that can be used as custom vocabulary
                  format: base64
      responses:
        '200':
          description: Mentions matching the criteria.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValueUnits"

#  /extract-from-convo:
#    post:
#      tags:
#        - "ie"
#      summary: |
#        Accepts a conversation in rev.ai text format and extracts Odin Mentions.
#      description: |
#        Accepts a conversation in rev.ai text format and extracts Odin Mentions.
#      requestBody:
#        description: |
#          Conversation text to process.
#        required: true
#        content:
#          text/plain:
#            schema:
#              type: string
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/MentionData"

#  /extract-from-convo/{label}:
#    post:
#      tags:
#        - "ie"
#      summary: |
#        Accepts a conversation in rev.ai text format and extracts Odin Mentions.
#      description: |
#        Accepts a conversation in rev.ai text format and extracts Odin Mentions.
#      parameters:
#        - name: label
#          in: path
#          description: A mention label to retain. Includes all of that label's hyponyms (i.e., children in the taxonomy)
#          required: true
#          type: string
#      requestBody:
#        description: |
#          Conversation text to process.
#        required: true
#        content:
#          text/plain:
#            schema:
#              type: string
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/MentionData"

#  /simple/extract-from-convo:
#    post:
#      tags:
#        - "ie"
#      summary: |
#        Accepts a conversation in rev.ai text format and extracts simplified forms of Odin Mentions.
#      description: |
#        Accepts a conversation in rev.ai text format and extracts simplified forms of Odin Mentions.
#      requestBody:
#        description: |
#          Conversation text to process.
#        required: true
#        content:
#          text/plain:
#            schema:
#              type: string
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/SimpleMentionData"

#  /simple/extract-from-convo/{label}:
#    post:
#      tags:
#        - "ie"
#      summary: |
#        Accepts a conversation in rev.ai text format and extracts simplified forms of Odin Mentions.
#      description: |
#        Accepts a conversation in rev.ai text format and extracts simplified forms of Odin Mentions.
#      parameters:
#        - name: label
#          in: path
#          description: A mention label to retain. Includes all of that label's hyponyms (i.e., children in the taxonomy)
#          required: true
#          type: string
#      requestBody:
#        description: |
#          Conversation text to process.
#        required: true
#        content:
#          text/plain:
#            schema:
#              type: string
#      responses:
#        '200':
#          description: Mentions matching the criteria.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/SimpleMentionData"

#  /annotate:
#    get:
#      tags:
#        - ie
#      summary: |
#        Annotate text.
#      description: |
#        Annotate (tokenize, tag, parse, etc.) text.
#      parameters:
#        - name: text
#          in: query
#          description: |
#            The text to be annotated.
#          required: true
#          schema:
#            type: string
#        #  example:
#      responses:
#        '200':
#          description: Annotated text in the form of Document JSON.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Document"
#
#    post:
#      tags:
#        - "ie"
#      summary: |
#        Accepts raw text and produces a `org.clulab.processors.Document`
#      description: |
#        Accepts raw text and produces a `org.clulab.processors.Document`
#      requestBody:
#        description: |
#          raw text to annotate.
#        required: true
#        content:
#          text/plain:
#            schema:
#              type: string
#      responses:
#        '200':
#          description: Annotated text in the form of Document JSON.
#          content:
#            application/json:
#              schema:
#                $ref: "#/components/schemas/Document"
components:
  schemas:

#    Document:
#      type: object
#      required:
#        - id
#        - text
#        - sentences
#      properties:
#        id:
#          type: integer
#          format: int64
#          description: |
#            The equivalence hash for this org.clulab.processors.Document.
#        text:
#          type: string
#          description: |
#            The original text from which this Document was produced.
#        sentences:
#          type: array
#          description: |
#            array of org.clulab.processors.Sentence.
#          items:
#            $ref: "#/components/schemas/Sentence"

#    Sentence:
#      type: object
#      required:
#        - words
#        - startOffsets
#        - endOffsets
#  #      - raw
#  #      - tags
#  #      - lemmas
#  #      - entities
#  #      - norms
#  #      - chunks
#        - graphs
#      properties:
#        words:
#          type: array
#          description: |
#            The tokens for this sentence.
#          items:
#            type: string
#        lemmas:
#          type: array
#          description: |
#            The lemma form of each token in this sentence.
#          items:
#            type: string
#        tags:
#          type: array
#          description: |
#            The part of speech tag for each token in this sentence.
#          items:
#            type: string
#        chunks:
#          type: array
#          description: |
#            The BIO-style chunk label designating a coarse XP assignment for each token in this sentence.
#          items:
#            type: string
#        entities:
#          type: array
#          description: |
#            The BIO-style entity label for each token in this sentence.
#          items:
#            type: string
#        startOffsets:
#          type: array
#          description: |
#            The character-based start offset for each token in this sentence.
#          items:
#            type: integer
#            format: int32
#        endOffsets:
#          type: array
#          description: |
#            The character-based end offset for each token in this sentence.
#          items:
#            type: integer
#            format: int32
#        graphs:
#          $ref: "#/components/schemas/GraphMap"

#    GraphMap:
#      type: object
#      description: |
#        Map of graph name -> DirectedGraph.
#      additionalProperties:
#        type: string
#        description: |
#          The name of a DirectedGraph.

#    DirectedGraph:
#      type: object
#      properties:
#        edges:
#          type: array
#          description: |
#            A edges comprising this graph.
#          items:
#            $ref: "#/components/schemas/Edge"
#        roots:
#          type: array
#          description: |
#            The token indices corresponding to the root nodes for this DirectedGraph.
#          items:
#            type: integer
#            format: int32

#    Edge:
#      type: object
#      required:
#        - source
#        - destination
#        - relation
#      properties:
#        source:
#          type: integer
#          format: int32
#          description: |
#            The token index for the source vertex.
#        destination:
#          type: integer
#          format: int32
#          description: |
#            The token index for the destination vertex.
#        relation:
#          type: string
#          description: |
#            The relation to which this Edge corresponds.
#    Interval:
#      type: object
#      required:
#        - start
#        - end
#      properties:
#        start:
#          type: integer
#          format: int32
#          description: |
#            Inclusive start of org.clulab.struct.Interval.
#        end:
#          type: integer
#          format: int32
#          description: |
#            Exclusive end of org.clulab.struct.Interval.

#    Argument:
#      type: object
#      required:
#        - role
#        - text
#        - subtype
#        - labels
#      properties:
#        role:
#          type: string
#          description: |
#            The argument's role (ex. theme)
#        text:
#          type: string
#          description: |
#            The text (span) corresponding to this argument
#        subtype:
#          type: string
#          description: |
#            Lowest hyponym in the labels array
#        labels:
#          type: array
#          description: |
#            array of Mention labels
#          items: string

#    MentionData:
#      type: object
#      required:
#        - documents
#        - mentions
#      properties:
#        documents:
#          type: object
#          description: |
#            Map from equivalence hash to org.clulab.processors.Document.
#          additionalProperties:
#            type: integer
#            format: int64
#        mentions:
#          type: array
#          description: |
#            array of org.clulab.odin.Mention.
#          items:
#            $ref: "#/components/schemas/Mention"

#    Mention:
#      type: object
#      required:
#        - type
#        - id
#        - text
#        - labels
#        - tokenInterval
#        - characterStartOffset
#        - characterEndOffset
#        - sentence
#        - document
#        - keep
#        - foundBy
#
#      properties:
#        type:
#          type: array
#          description: |
#            A code denoting the type of this mention.
#          items:
#            enum: ["TextBoundMention", "EventMention", "RelationMention", "CrossSentenceMention"]
#        id:
#          type: string
#          description: |
#            Equivalence identifier of the form `shortCode:equivalenceHash`.  `shortCode` is expected to be one of the following: ["T", "E", "R", "CS"].
#        text:
#          type: string
#          description: |
#            Enclosing text span corresponding to this Mention.
#        labels:
#          type: array
#          description: |
#            The labels for this Mention.
#          items:
#            type: string
#        tokenInterval:
#          $ref: "#/components/schemas/Interval"
#        characterStartOffset:
#          type: integer
#          format: int32
#        characterEndOffset:
#          type: integer
#          format: int32
#        sentence:
#          type: integer
#          format: int32
#          description: |
#            The sentence index for the org.clulab.processors.Sentence matching the referenced org.clulab.processors.Document.
#        document:
#          type: integer
#          format: int64
#          description: |
#            The ID corresponding to the document referenced in the `documents` property of `MentionData`.
#        keep:
#          type: boolean
#          description: |
#            Whether or not the Mention was intended to be retained.
#        foundBy:
#          type: string
#          description: |
#            The name of the rule responsible for detecting this mention.

#    SimpleMentionData:
#      type:
#        type: array
#        description: |
#          A sequence of simplified Odin Mentions
#        items:
#            oneOf:
#              - $ref: '#/components/schemas/SimpleTextBoundMention'
#              - $ref: '#/components/schemas/SimpleRelationMention'
#              - $ref: '#/components/schemas/SimpleEventMention'
#              - $ref: '#/components/schemas/SimpleCrossSentenceMention'

#    SimpleTextBoundMention:
#      type: object
#      required:
#        - $type
#        - "doc-id"
#        - sentence
#        - "sentence-index"
#        - labels
#        - span
#        - found-by
#
#      properties:
#        $type:
#          type: string
#          description: |
#            An identifier for this mention type.
#          items:
#            enum: ["textbound"]
#        "doc-id":
#          type: string
#          description: |
#            An identifier for the source document from which this mention originates.
#        text:
#          type: string
#          description: |
#            Enclosing text span corresponding to this mention.
#        labels:
#          type: array
#          description: |
#            The labels for this Mention.
#          items:
#            type: string
#        sentence:
#          type: string
#          description: |
#            The sentence text that encompasses this mention.
#        "sentence-index":
#          type: integer
#          format: int32
#          description: |
#            The index for this sentence (i.e., its order within the document)
#        found-by:
#          type: string
#          description: |
#            The name of the rule responsible for detecting this mention.

#    SimpleRelationMention:
#      type: object
#      required:
#        - $type
#        - "doc-id"
#        - sentence
#        - "sentence-index"
#        - labels
#        - span
#        - found-by
#        - arguments
#
#      properties:
#        $type:
#          type: string
#          description: |
#            An identifier for this mention type.
#          items:
#            enum: ["relation"]
#        "doc-id":
#          type: string
#          description: |
#            An identifier for the source document from which this mention originates.
#        text:
#          type: string
#          description: |
#            Enclosing text span corresponding to this mention.
#        labels:
#          type: array
#          description: |
#            The labels for this Mention.
#          items:
#            type: string
#        sentence:
#          type: string
#          description: |
#            The sentence text that encompasses this mention.
#        "sentence-index":
#          type: integer
#          format: int32
#          description: |
#            The index for this sentence (i.e., its order within the document)
#        "found-by":
#          type: string
#          description: |
#            The name of the rule responsible for detecting this mention.
#        arguments:
#          $ref: '#/components/schemas/SimpleArgumentsMap'
    
#    SimpleEventMention:
#      type: object
#      required:
#        - $type
#        - "doc-id"
#        - sentence
#        - "sentence-index"
#        - labels
#        - span
#        - found-by
#        - arguments
#        - trigger
#
#      properties:
#        $type:
#          type: string
#          description: |
#            An identifier for this mention type.
#          items:
#            enum: ["event"]
#        "doc-id":
#          type: string
#          description: |
#            An identifier for the source document from which this mention originates.
#        text:
#          type: string
#          description: |
#            Enclosing text span corresponding to this mention.
#        labels:
#          type: array
#          description: |
#            The labels for this Mention.
#          items:
#            type: string
#        sentence:
#          type: string
#          description: |
#            The sentence text that encompasses this mention.
#        "sentence-index":
#          type: integer
#          format: int32
#          description: |
#            The index for this sentence (i.e., its order within the document)
#        "found-by":
#          type: string
#          description: |
#            The name of the rule responsible for detecting this mention.
#        arguments:
#          $ref: '#/components/schemas/SimpleArgumentsMap'
#        trigger:
#          type: string
#          description: |
#            A predicate that signals this particular relation.

#    SimpleCrossSentenceMention:
#      type: object
#      required:
#        - $type
#        - "doc-id"
#        - sentence
#        - "sentence-index"
#        - labels
#        - span
#        - "found-by"
#        - arguments
#        - anchor
#        - "anchor-sentence"
#        - "anchor-sentence-index"
#        - neighbor
#        - "neighbor-sentence"
#        - "neighbor-sentence-index"
#
#      properties:
#        $type:
#          type: string
#          description: |
#            An identifier for this mention type.
#          items:
#            enum: ["cross-sentence"]
#        "doc-id":
#          type: string
#          description: |
#            An identifier for the source document from which this mention originates.
#        text:
#          type: string
#          description: |
#            Enclosing text span corresponding to this mention.
#        labels:
#          type: array
#          description: |
#            The labels for this Mention.
#          items:
#            type: string
#        sentence:
#          type: string
#          description: |
#            The sentence text that encompasses this mention.
#        "sentence-index":
#          type: integer
#          format: int32
#          description: |
#            The index for this sentence (i.e., its order within the document)
#        "found-by":
#          type: string
#          description: |
#            The name of the rule responsible for detecting this mention.
#        arguments:
#          $ref: '#/components/schemas/SimpleArgumentsMap'
#        anchor:
#          type: string
#          description: |
#            A component mention falling in a different sentence from the neighbor mention.
#        "anchor-sentence":
#          type: string
#          description: |
#            The sentence text that encompasses this anchor mention.
#        "anchor-sentence-index":
#          type: integer
#          format: int32
#          description: |
#            The anchor sentence's index for this sentence (i.e., its order within the document)
#        neighbor:
#          type: string
#          description: |
#            A component mention falling in different sentence from the anchor mention.
#        "neighbor-sentence":
#          type: string
#          description: |
#            The sentence text that encompasses this neighbor mention.
#        "neighbor-sentence-index":
#          type: integer
#          format: int32
#          description: |
#            The index for this sentence (i.e., its order within the document)
    
#    SimpleArgumentsMap:
#        type: object
#        additionalProperties:
#          type: array
#          description: |
#            array of simplified arguments
#          items:
#            $ref: "#/components/schemas/SimpleArgument"

#    SimpleArgument:
#        type: object
#        required:
#          - text
#          - labels
#        properties:
#          text:
#            type: string
#            description: |
#              The text of this argument
#          labels:
#            type: array
#            description: |
#              Array of mention labels for this argument
#            items: string

    ValueUnits:
        type: array
        description: list of value-units
        items:
            $ref: "#/components/schemas/ValueUnit"

    ValueUnit:
        type: object
        description: a value-unit with possible variable
        required:
          - text
          - value_type
          - value
          - unit
          - sentence
          - sentence_idx
        properties:
            text:
                type: string
                description: the text span of the value-unit
                example: "1300 nursery"
            value_type:
                type: string
                description: the type of the value that follows
                enum:
                  - String
                  - Boolean
                example: String
            value:
                type: string
                description: if value_type was String, the numeric value of the value-unit expressed as text; if value_type was Boolean, then either "True" or "False"
                example: "1300"
            unit:
                type: string
                description: the unit of the value-unit
                example: "nursery"
            sentence:
                type: string
                description: the text of the sentence the value-unit occurs in
                example: "And then main farm is I have to think on this one 1300 nursery , 4 4500 finishing 192 farrowing and 1100 sows gestation ."
            sentence_idx:
                type: integer
                description: the index of the sentence the value-unit occurs in
                example: 65
            variable:
                $ref: "#/components/schemas/Variable"

    Variable:
        type: object
        description: a variable associated with a value-unit
        required:
          - variable_text
          - grounding
          - grounding_id
          - location
          - context_sentence
          - context_sentence_idx
        properties:
            variable_text:
                type: string
                description: the text span of the variable
                example: "capacity of those barns"
            grounding:
                type: string
                description: the category best matching the variable and/or value and units
                example: barn capacity
            grounding_id:
                type: string
                description: the unique identifier to which the grounding maps (or N/A)
                example: barns.capacity
            location:
                type: string
                description: the site (e.g., name of farm) associated with the variable (or N/A)
                example: "main farm"
            context_sentence:
                type: string
                description: the text of the sentence the variable occurs in (or N/A)
                example: "And what 's the capacity of those barns ?"
            context_sentence_idx:
                type: integer
                description: the index of the sentence the variable occurs in (or -1)
                example: 62

    Metadata:
        type: object
        description: additional data related to conversations
        properties:
            id:
                type: integer
                description: ""
                example: 797
            name:
                type: string
                description: ""
                example: Caine
            description:
                type: string
                description: ""
                example: "Matt Smith Owned\r\n\r\nOK NPB"
            supplier_id:
                type: integer
                description: ""
                example: 12
            is_verified:
                type: boolean
                description: ""
                example: false
            address:
                type: string
                description: ""
                example: 1234 County Rd 5678
            state:
                type: string
                description: ""
                example: OK
            postal_code:
                type: string
                description: ""
                example: 90210
            farm_contact_name:
                type: string
                description: ""
                example: Matt Smith
            farm_contact_email:
                type: string
                description: ""
                example: porkfarmer@gmail.com
            farm_contact_phone:
                type: string
                description: ""
                example: 1203405678
            field_contact_name:
                type: string
                description: ""
                example: 
            field_contact_email:
                type: string
                description: ""
                example:
            year_onboarded:
                type: integer
                description: ""
                example: 2020
            city:
                type: string
                description: ""
                example: Oklahoma City
            external_user_id:
                type: number
                description: ""
                example: null
            thumbnail:
                type: string
                description: ""
                example: null
            external_id:
                type: string
                description: ""
                example: null
            fields:
                type: array
                description: ""
                items:
                    type: string
                    description: ""
                example:
                  - Basket North
                  - East of Eden
                  - West of Lester
                  - Howard
    BuildInfo:
      type: object
      required:
        - name
        - version
        - scalaVersion
        - sbtVersion
        - libraryDependencies
        - scalacOptions
        - gitCurrentBranch
        - gitHeadCommit
        - gitHeadCommitDate
        - gitUncommittedChanges
        - builtAtString
        - builtAtMillis
      properties:
        name:
          type: string
          description: "The name of the app."
          example: "annotaurus-rest-api"
        version:
          type: string
          description: "Current version of the app."
          example: "0.1.0-SNAPSHOT"
        scalaVersion:
          type: string
          description: "The version of Scala used to build the app."
          example: "2.12.10"
        sbtVersion:
          type: string
          description: "The version of sbt used to build the app."
          example: "1.6.0-RC1"
        libraryDependencies:
          type: array
          items:
            type: string
            example: "org.scala-lang:scala-library:2.12.10"
          description: "Project dependencies (versioned)."
        scalacOptions:
          type: array
          items:
            type: string
            example: "utf8"
          description: "Options used in current build."
        gitCurrentBranch:
          type: string
          description: "The Git branch for the current build."
          example: "some-branch-name"
        gitHeadCommit:
          type: string
          description: "The Git commit has for the current build."
          example: "b4c8c8b"
        gitHeadCommitDate:
          type: string
          description: "The date of the most recent commit."
          example: "2021-12-22T15:02:57-0700"
        gitUncommittedChanges:
          type: boolean
          description: "Whether or not the current build includes uncommitted changes."
          example: true
        builtAtString:
          type: string
          description: "The date and time of the current build."
          example: "2021-12-28 20:46:09.232"
        builtAtMillis:
          type: string
          description: "Date in milliseconds (since unix epoch)."
          example: "1640724369232"

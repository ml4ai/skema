---
# Python 3.11.2 Primitives

# Built-in Functions
# Source: https://docs.python.org/3/library/functions.html
Functions:
  - abs
  - aiter
  - all
  - any
  - anext
  - ascii
  - bin
  - bool
  - breakpoint
  - bytearray
  - bytes
  - callable
  - chr
  - classmethod
  - compile
  - complex
  - delattr
  - dict
  - dir
  - divmod
  - enumerate
  - eval
  - exec
  - filter
  - float
  - format
  - frozenset
  - getattr
  - globals
  - hasattr
  - hash
  - help
  - hex
  - id
  - input
  - int
  - isinstance
  - issubclass
  - iter
  - len
  - list
  - locals
  - map
  - max
  - memoryview
  - min
  - next
  - object
  - oct
  - open
  - ord
  - pow
  - print
  - property
  - range
  - repr
  - reversed
  - round
  - set
  - setattr
  - slice
  - sorted
  - staticmethod
  - str
  - sum
  - super
  - tuple
  - type
  - vars
  - zip
  - __import__

# Built-in Operators
# Source: https://docs.python.org/3/library/operator.html
Operators:
  - ast.Add: operator.add
  - ast.Sub: operator.sub
  - ast.Div: operator.truediv
  - ast.FloorDiv: operator.floordiv
  - ast.Mod: operator.mod
  - ast.Pow: operator.pow
  - ast.LShift: operator.lshift
  - ast.Rshift: operator.rshift
  - ast.BitOr: operator.or_
  - ast.BitAnd: operator.and_
  - ast.BitXor: operator.xor
  - ast.Eq: operator.eq
  - ast.NotEq: operator.ne
  - ast.Lt: operator.lt
  - ast.LtE: operator.le
  - ast.Gt: operator.gt
  - ast.GtE: operator.ge
  - ast.In: operator.contains
  - ast.Is: operator.is
  - ast.IsNot: operator.is_not
  - ast.MatMul: operator.matmul
  - ast.UAdd: operator.pos
  - ast.USub: operator.neg
  - ast.Not: operator.not_
  - ast.Invert: operator.invert
  # Special AST Nodes that don't have built in operator functions because they're keywords:
  - ast.And: gromet_and 
  - ast.Or: gromet_or

# There are some operators that don't have equivilent AST nodes
# or still need to be matched with an AST node:
# "operator.concat", "a" + "b" ? 
# "operator.getitem"
# "operator.setitem",
# "operator.delitem",
# "operator.truth",
# "operator.abs", 
# "operator.index", # Not to be confused with indexOf
# "operator.indexOf"
# "operator.countOf",
# "operator.length_hint"
# "operator.call
# "operator.attrgetter"
# "operator.itemgetter"
# "operator.methodcaller"

# And finally one AST node that only has an equivilent operator for the positive case:
# "ast.NotIn": "", 
# Translate in CAST using ast.Not and ast.In to eliminate ast.NotIn appearing in the translation
# Operator(ast.Not, [Operator(ast.In, [...])])
---

    
#!/usr/bin/env python3
import sys
import argparse
from tree_sitter import Language, Node, Parser
from pathlib import Path
from skema.program_analysis.tree_sitter_parsers.build_parsers import (
    INSTALLED_LANGUAGES_FILEPATH
)

""" Get the Tree-sitter syntax tree for MATLAB files"""

def print_tree(node: Node, indent = '', step = ''):
    """Display the node branch in pretty format"""
    for child in node.children:
        if not child.type == "\n":
            print(f"{indent}{child.type}")
        print_tree(child, indent + step, step)

def foo(filename="", indent=0, step=4, lang=""):
    if len(sys.argv) > 1:
        # Create the Tree-sitter parser for the language name
        parser = Parser()
        parser.set_language(
            Language(INSTALLED_LANGUAGES_FILEPATH, lang)
        )
        path = Path(filename)
        try:
            source = path.read_text().strip()
            print(f"\nSOURCE ({path.name}):")
            print(source)
            print("\nSYNTAX TREE:")
            tree = parser.parse(bytes(source, "utf8"))
            print_tree(tree.root_node, " "*indent, " "*step)
        except IOError:
            print(f"File not found: {path.name}")
    else:
        print("Please enter at least one input file")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('filename', help="set the filename")
    parser.add_argument('--indent', '-i', default=0, type=int, 
        help="initial indent spaces, default = 0")
    parser.add_argument('--step', '-s', default=4, type=int, 
        help="indent step spaces, default = 4")
    parser.add_argument('--lang', '-l', default="matlab", type=str,
        help="set the parser language, default = 'matlab'")
    args = parser.parse_args()
    foo(args.filename, args.indent, args.step, args.lang)


(function() {var type_impls = {
"mathml":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LocatedSpan%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#170\">source</a><a href=\"#impl-LocatedSpan%3CT%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#198\">source</a><h4 class=\"code-header\">pub fn <a href=\"nom_locate/struct.LocatedSpan.html#tymethod.new\" class=\"fn\">new</a>(program: T) -&gt; <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T&gt;</h4></section></summary><div class=\"docblock\"><p>Create a span for a particular input with default <code>offset</code> and\n<code>line</code> values and empty extra data.\nYou can compute the column through the <code>get_column</code> or <code>get_utf8_column</code>\nmethods.</p>\n<p><code>offset</code> starts at 0, <code>line</code> starts at 1, and <code>column</code> starts at 1.</p>\n<p>Do not use this constructor in parser functions; <code>nom</code> and\n<code>nom_locate</code> assume span offsets are relative to the beginning of the\nsame input. In these cases, you probably want to use the\n<code>nom::traits::Slice</code> trait instead.</p>\n<h5 id=\"example-of-use\"><a class=\"doc-anchor\" href=\"#example-of-use\">§</a>Example of use</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>nom_locate::LocatedSpan;\n\n<span class=\"kw\">let </span>span = LocatedSpan::new(<span class=\"string\">b\"foobar\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(span.location_offset(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(span.location_line(),   <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(span.get_column(),      <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(span.fragment(),        &amp;&amp;<span class=\"string\">b\"foobar\"</span>[..]);</code></pre></div>\n</div></details></div></details>",0,"mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#208\">source</a><a href=\"#impl-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_extra\" class=\"method\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#236\">source</a><h4 class=\"code-header\">pub fn <a href=\"nom_locate/struct.LocatedSpan.html#tymethod.new_extra\" class=\"fn\">new_extra</a>(program: T, extra: X) -&gt; <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;</h4></section></summary><div class=\"docblock\"><p>Create a span for a particular input with default <code>offset</code> and\n<code>line</code> values. You can compute the column through the <code>get_column</code> or <code>get_utf8_column</code>\nmethods.</p>\n<p><code>offset</code> starts at 0, <code>line</code> starts at 1, and <code>column</code> starts at 1.</p>\n<p>Do not use this constructor in parser functions; <code>nom</code> and\n<code>nom_locate</code> assume span offsets are relative to the beginning of the\nsame input. In these cases, you probably want to use the\n<code>nom::traits::Slice</code> trait instead.</p>\n<h5 id=\"example-of-use\"><a class=\"doc-anchor\" href=\"#example-of-use\">§</a>Example of use</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>nom_locate::LocatedSpan;\n\n<span class=\"kw\">let </span>span = LocatedSpan::new_extra(<span class=\"string\">b\"foobar\"</span>, <span class=\"string\">\"extra\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(span.location_offset(), <span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(span.location_line(),   <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(span.get_column(),      <span class=\"number\">1</span>);\n<span class=\"macro\">assert_eq!</span>(span.fragment(),        &amp;&amp;<span class=\"string\">b\"foobar\"</span>[..]);\n<span class=\"macro\">assert_eq!</span>(span.extra,             <span class=\"string\">\"extra\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_from_raw_offset\" class=\"method\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#249-254\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"nom_locate/struct.LocatedSpan.html#tymethod.new_from_raw_offset\" class=\"fn\">new_from_raw_offset</a>(\n    offset: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>,\n    line: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.u32.html\">u32</a>,\n    fragment: T,\n    extra: X\n) -&gt; <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;</h4></section></summary><div class=\"docblock\"><p>Similar to <code>new_extra</code>, but allows overriding offset and line.\nThis is unsafe, because giving an offset too large may result in\nundefined behavior, as some methods move back along the fragment\nassuming any negative index within the offset is valid.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.location_offset\" class=\"method\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#265\">source</a><h4 class=\"code-header\">pub fn <a href=\"nom_locate/struct.LocatedSpan.html#tymethod.location_offset\" class=\"fn\">location_offset</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>The offset represents the position of the fragment relatively to\nthe input of the parser. It starts at offset 0.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.location_line\" class=\"method\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#271\">source</a><h4 class=\"code-header\">pub fn <a href=\"nom_locate/struct.LocatedSpan.html#tymethod.location_line\" class=\"fn\">location_line</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>The line number of the fragment relatively to the input of the\nparser. It starts at line 1.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.fragment\" class=\"method\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#277\">source</a><h4 class=\"code-header\">pub fn <a href=\"nom_locate/struct.LocatedSpan.html#tymethod.fragment\" class=\"fn\">fragment</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;T</a></h4></section></summary><div class=\"docblock\"><p>The fragment that is spanned.\nThe fragment represents a part of the input of the parser.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.map_extra\" class=\"method\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#316\">source</a><h4 class=\"code-header\">pub fn <a href=\"nom_locate/struct.LocatedSpan.html#tymethod.map_extra\" class=\"fn\">map_extra</a>&lt;U, F&gt;(self, f: F) -&gt; <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, U&gt;<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(X) -&gt; U,</div></h4></section></summary><div class=\"docblock\"><p>Transform the extra inside into another type</p>\n<h5 id=\"example-of-use-1\"><a class=\"doc-anchor\" href=\"#example-of-use-1\">§</a>Example of use</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>nom::{\n  IResult,\n  combinator::{recognize, map_res},\n  sequence::{terminated, tuple},\n  character::{complete::{char, one_of}, is_digit},\n  bytes::complete::{tag, take_while1}\n};\n\n<span class=\"kw\">fn </span>decimal(input: LocatedSpan&lt;<span class=\"kw-2\">&amp;</span>str&gt;) -&gt; IResult&lt;LocatedSpan&lt;<span class=\"kw-2\">&amp;</span>str&gt;, LocatedSpan&lt;<span class=\"kw-2\">&amp;</span>str&gt;&gt; {\n  recognize(\n       take_while1(|c| is_digit(c <span class=\"kw\">as </span>u8) || c == <span class=\"string\">'_'</span>)\n  )(input)\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>span = LocatedSpan::new(<span class=\"string\">\"$10\"</span>);\n    <span class=\"comment\">// matches the $ and then matches the decimal number afterwards,\n    // converting it into a `u8` and putting that value in the span\n    </span><span class=\"kw\">let </span>(<span class=\"kw\">_</span>, (<span class=\"kw\">_</span>, n)) = tuple((\n                        tag(<span class=\"string\">\"$\"</span>),\n                        map_res(\n                            decimal,\n                            |x| x.fragment().parse::&lt;u8&gt;().map(|n| x.map_extra(|<span class=\"kw\">_</span>| n))\n                        )\n                      ))(span).unwrap();\n    <span class=\"macro\">assert_eq!</span>(n.extra, <span class=\"number\">10</span>);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_fragment\" class=\"method\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#352\">source</a><h4 class=\"code-header\">pub fn <a href=\"nom_locate/struct.LocatedSpan.html#tymethod.into_fragment\" class=\"fn\">into_fragment</a>(self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>Takes ownership of the fragment without (re)borrowing it.</p>\n<h5 id=\"example-of-use-2\"><a class=\"doc-anchor\" href=\"#example-of-use-2\">§</a>Example of use</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>nom::{\n    IResult,\n    bytes::complete::{take_till, tag},\n    combinator::rest,\n};\n\n<span class=\"kw\">fn </span>parse_pair&lt;<span class=\"lifetime\">'a</span>&gt;(input: LocatedSpan&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str&gt;) -&gt; IResult&lt;LocatedSpan&lt;<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str&gt;, (<span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str, <span class=\"kw-2\">&amp;</span><span class=\"lifetime\">'a </span>str)&gt; {\n    <span class=\"kw\">let </span>(input, key) = take_till(|c| c == <span class=\"string\">'='</span>)(input)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>(input, <span class=\"kw\">_</span>) = tag(<span class=\"string\">\"=\"</span>)(input)<span class=\"question-mark\">?</span>;\n    <span class=\"kw\">let </span>(input, value) = rest(input)<span class=\"question-mark\">?</span>;\n\n    <span class=\"prelude-val\">Ok</span>((input, (key.into_fragment(), value.into_fragment())))\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"kw\">let </span>span = LocatedSpan::new(<span class=\"string\">\"key=value\"</span>);\n    <span class=\"kw\">let </span>(<span class=\"kw\">_</span>, pair) = parse_pair(span).unwrap();\n    <span class=\"macro\">assert_eq!</span>(pair, (<span class=\"string\">\"key\"</span>, <span class=\"string\">\"value\"</span>));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_fragment_and_extra\" class=\"method\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#357\">source</a><h4 class=\"code-header\">pub fn <a href=\"nom_locate/struct.LocatedSpan.html#tymethod.into_fragment_and_extra\" class=\"fn\">into_fragment_and_extra</a>(self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.tuple.html\">(T, X)</a></h4></section></summary><div class=\"docblock\"><p>Takes ownership of the fragment and extra data without (re)borrowing them.</p>\n</div></details></div></details>",0,"mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#362\">source</a><a href=\"#impl-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nom/traits/trait.AsBytes.html\" title=\"trait nom::traits::AsBytes\">AsBytes</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_line_beginning\" class=\"method\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#419\">source</a><h4 class=\"code-header\">pub fn <a href=\"nom_locate/struct.LocatedSpan.html#tymethod.get_line_beginning\" class=\"fn\">get_line_beginning</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Return the line that contains this LocatedSpan.</p>\n<p>The <code>get_column</code> and <code>get_utf8_column</code> functions returns\nindexes that corresponds to the line returned by this function.</p>\n<p>Note that if this LocatedSpan ends before the end of the\noriginal data, the result of calling <code>get_line_beginning()</code>\nwill not include any data from after the LocatedSpan.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">let </span>program = LocatedSpan::new(\n    <span class=\"string\">\"Hello World!\\\n    \\nThis is a multi-line input\\\n    \\nthat ends after this line.\\n\"</span>);\n<span class=\"kw\">let </span>multi = program.find_substring(<span class=\"string\">\"multi\"</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(\n    program.slice(multi..).get_line_beginning(),\n    <span class=\"string\">\"This is a multi-line input\"</span>.as_bytes(),\n);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_column\" class=\"method\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#446\">source</a><h4 class=\"code-header\">pub fn <a href=\"nom_locate/struct.LocatedSpan.html#tymethod.get_column\" class=\"fn\">get_column</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the column index, assuming 1 byte = 1 column.</p>\n<p>Use it for ascii text, or use get_utf8_column for UTF8.</p>\n<h5 id=\"example-of-use\"><a class=\"doc-anchor\" href=\"#example-of-use\">§</a>Example of use</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>span = LocatedSpan::new(<span class=\"string\">\"foobar\"</span>);\n\n<span class=\"macro\">assert_eq!</span>(span.slice(<span class=\"number\">3</span>..).get_column(), <span class=\"number\">4</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_utf8_column\" class=\"method\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#474\">source</a><h4 class=\"code-header\">pub fn <a href=\"nom_locate/struct.LocatedSpan.html#tymethod.get_utf8_column\" class=\"fn\">get_utf8_column</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the column index for UTF8 text. Return value is unspecified for non-utf8 text.</p>\n<p>This version uses bytecount’s hyper algorithm to count characters. This is much faster\nfor long lines, but is non-negligibly slower for short slices (below around 100 bytes).\nThis is also sped up significantly more depending on architecture and enabling the simd\nfeature gates. If you expect primarily short lines, you may get a noticeable speedup in\nparsing by using <code>naive_get_utf8_column</code> instead. Benchmark your specific use case!</p>\n<h5 id=\"example-of-use-1\"><a class=\"doc-anchor\" href=\"#example-of-use-1\">§</a>Example of use</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>span = LocatedSpan::new(<span class=\"string\">\"メカジキ\"</span>);\n<span class=\"kw\">let </span>indexOf3dKanji = span.find_substring(<span class=\"string\">\"ジ\"</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(span.slice(indexOf3dKanji..).get_column(), <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(span.slice(indexOf3dKanji..).get_utf8_column(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.naive_get_utf8_column\" class=\"method\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#501\">source</a><h4 class=\"code-header\">pub fn <a href=\"nom_locate/struct.LocatedSpan.html#tymethod.naive_get_utf8_column\" class=\"fn\">naive_get_utf8_column</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Return the column index for UTF8 text. Return value is unspecified for non-utf8 text.</p>\n<p>A simpler implementation of <code>get_utf8_column</code> that may be faster on shorter lines.\nIf benchmarking shows that this is faster, you can use it instead of <code>get_utf8_column</code>.\nPrefer defaulting to <code>get_utf8_column</code> unless this legitimately is a performance bottleneck.</p>\n<h5 id=\"example-of-use-2\"><a class=\"doc-anchor\" href=\"#example-of-use-2\">§</a>Example of use</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code>\n<span class=\"kw\">let </span>span = LocatedSpan::new(<span class=\"string\">\"メカジキ\"</span>);\n<span class=\"kw\">let </span>indexOf3dKanji = span.find_substring(<span class=\"string\">\"ジ\"</span>).unwrap();\n\n<span class=\"macro\">assert_eq!</span>(span.slice(indexOf3dKanji..).get_column(), <span class=\"number\">7</span>);\n<span class=\"macro\">assert_eq!</span>(span.slice(indexOf3dKanji..).naive_get_utf8_column(), <span class=\"number\">3</span>);</code></pre></div>\n</div></details></div></details>",0,"mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-InputTakeAtPosition-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#554-557\">source</a><a href=\"#impl-InputTakeAtPosition-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"nom/traits/trait.InputTakeAtPosition.html\" title=\"trait nom::traits::InputTakeAtPosition\">InputTakeAtPosition</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nom/traits/trait.InputTakeAtPosition.html\" title=\"trait nom::traits::InputTakeAtPosition\">InputTakeAtPosition</a> + <a class=\"trait\" href=\"nom/traits/trait.InputLength.html\" title=\"trait nom::traits::InputLength\">InputLength</a> + <a class=\"trait\" href=\"nom/traits/trait.InputIter.html\" title=\"trait nom::traits::InputIter\">InputIter</a>,\n    <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;: <a class=\"trait\" href=\"nom/traits/trait.Slice.html\" title=\"trait nom::traits::Slice\">Slice</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>&gt;&gt; + <a class=\"trait\" href=\"nom/traits/trait.Slice.html\" title=\"trait nom::traits::Slice\">Slice</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>&gt;&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"nom/traits/trait.InputTakeAtPosition.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;T as <a class=\"trait\" href=\"nom/traits/trait.InputIter.html\" title=\"trait nom::traits::InputIter\">InputIter</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.InputIter.html#associatedtype.Item\" title=\"type nom::traits::InputIter::Item\">Item</a></h4></section></summary><div class='docblock'>The current input type is a sequence of that <code>Item</code> type. <a href=\"nom/traits/trait.InputTakeAtPosition.html#associatedtype.Item\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_position_complete\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#561-566\">source</a><a href=\"#method.split_at_position_complete\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.InputTakeAtPosition.html#tymethod.split_at_position_complete\" class=\"fn\">split_at_position_complete</a>&lt;P, E&gt;(\n    &amp;self,\n    predicate: P\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;, <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;), <a class=\"enum\" href=\"nom/internal/enum.Err.html\" title=\"enum nom::internal::Err\">Err</a>&lt;E&gt;&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"nom/error/trait.ParseError.html\" title=\"trait nom::error::ParseError\">ParseError</a>&lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;&gt;,\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt; as <a class=\"trait\" href=\"nom/traits/trait.InputTakeAtPosition.html\" title=\"trait nom::traits::InputTakeAtPosition\">InputTakeAtPosition</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.InputTakeAtPosition.html#associatedtype.Item\" title=\"type nom::traits::InputTakeAtPosition::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Looks for the first element of the input type for which the condition returns true,\nand returns the input up to this position. <a href=\"nom/traits/trait.InputTakeAtPosition.html#tymethod.split_at_position_complete\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_position\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#574-576\">source</a><a href=\"#method.split_at_position\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.InputTakeAtPosition.html#tymethod.split_at_position\" class=\"fn\">split_at_position</a>&lt;P, E&gt;(\n    &amp;self,\n    predicate: P\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;, <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;), <a class=\"enum\" href=\"nom/internal/enum.Err.html\" title=\"enum nom::internal::Err\">Err</a>&lt;E&gt;&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"nom/error/trait.ParseError.html\" title=\"trait nom::error::ParseError\">ParseError</a>&lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;&gt;,\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt; as <a class=\"trait\" href=\"nom/traits/trait.InputTakeAtPosition.html\" title=\"trait nom::traits::InputTakeAtPosition\">InputTakeAtPosition</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.InputTakeAtPosition.html#associatedtype.Item\" title=\"type nom::traits::InputTakeAtPosition::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Looks for the first element of the input type for which the condition returns true,\nand returns the input up to this position. <a href=\"nom/traits/trait.InputTakeAtPosition.html#tymethod.split_at_position\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_position1\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#584-590\">source</a><a href=\"#method.split_at_position1\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.InputTakeAtPosition.html#tymethod.split_at_position1\" class=\"fn\">split_at_position1</a>&lt;P, E&gt;(\n    &amp;self,\n    predicate: P,\n    e: <a class=\"enum\" href=\"nom/error/enum.ErrorKind.html\" title=\"enum nom::error::ErrorKind\">ErrorKind</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;, <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;), <a class=\"enum\" href=\"nom/internal/enum.Err.html\" title=\"enum nom::internal::Err\">Err</a>&lt;E&gt;&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"nom/error/trait.ParseError.html\" title=\"trait nom::error::ParseError\">ParseError</a>&lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;&gt;,\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt; as <a class=\"trait\" href=\"nom/traits/trait.InputTakeAtPosition.html\" title=\"trait nom::traits::InputTakeAtPosition\">InputTakeAtPosition</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.InputTakeAtPosition.html#associatedtype.Item\" title=\"type nom::traits::InputTakeAtPosition::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Looks for the first element of the input type for which the condition returns true\nand returns the input up to this position. <a href=\"nom/traits/trait.InputTakeAtPosition.html#tymethod.split_at_position1\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.split_at_position1_complete\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#599-605\">source</a><a href=\"#method.split_at_position1_complete\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.InputTakeAtPosition.html#tymethod.split_at_position1_complete\" class=\"fn\">split_at_position1_complete</a>&lt;P, E&gt;(\n    &amp;self,\n    predicate: P,\n    e: <a class=\"enum\" href=\"nom/error/enum.ErrorKind.html\" title=\"enum nom::error::ErrorKind\">ErrorKind</a>\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;, <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;), <a class=\"enum\" href=\"nom/internal/enum.Err.html\" title=\"enum nom::internal::Err\">Err</a>&lt;E&gt;&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"nom/error/trait.ParseError.html\" title=\"trait nom::error::ParseError\">ParseError</a>&lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;&gt;,\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt; as <a class=\"trait\" href=\"nom/traits/trait.InputTakeAtPosition.html\" title=\"trait nom::traits::InputTakeAtPosition\">InputTakeAtPosition</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.InputTakeAtPosition.html#associatedtype.Item\" title=\"type nom::traits::InputTakeAtPosition::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Looks for the first element of the input type for which the condition returns true\nand returns the input up to this position. <a href=\"nom/traits/trait.InputTakeAtPosition.html#tymethod.split_at_position1_complete\">Read more</a></div></details></div></details>","InputTakeAtPosition","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deref-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#145\">source</a><a href=\"#impl-Deref-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Target\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Target\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.77.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" class=\"associatedtype\">Target</a> = T</h4></section></summary><div class='docblock'>The resulting type after dereferencing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.deref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#147\">source</a><a href=\"#method.deref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/ops/deref/trait.Deref.html#tymethod.deref\" class=\"fn\">deref</a>(&amp;self) -&gt; &amp;&lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt; as <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&gt;::<a class=\"associatedtype\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/deref/trait.Deref.html#associatedtype.Target\" title=\"type core::ops::deref::Deref::Target\">Target</a></h4></section></summary><div class='docblock'>Dereferences the value.</div></details></div></details>","Deref","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#507\">source</a><a href=\"#impl-Hash-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#508\">source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,</div></h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.77.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.77.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.0/src/core/hash/mod.rs.html#238-240\">source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.slice.html\">[Self]</a>, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.77.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.77.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CT%3E-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#515\">source</a><a href=\"#impl-From%3CT%3E-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;T&gt; for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nom/traits/trait.AsBytes.html\" title=\"trait nom::traits::AsBytes\">AsBytes</a>,\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#516\">source</a><a href=\"#method.from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(i: T) -&gt; <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;</h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<T>","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsRef%3CU%3E-for-LocatedSpan%3C%26T,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#152-155\">source</a><a href=\"#impl-AsRef%3CU%3E-for-LocatedSpan%3C%26T,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, X&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;U&gt; for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;T</a>, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;U&gt; + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    U: ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_ref\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#157\">source</a><a href=\"#method.as_ref\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.AsRef.html#tymethod.as_ref\" class=\"fn\">as_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;U</a></h4></section></summary><div class='docblock'>Converts this type into a shared reference of the (usually inferred) input type.</div></details></div></details>","AsRef<U>","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ExtendInto-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#798-800\">source</a><a href=\"#impl-ExtendInto-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, X&gt; <a class=\"trait\" href=\"nom/traits/trait.ExtendInto.html\" title=\"trait nom::traits::ExtendInto\">ExtendInto</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nom/traits/trait.ExtendInto.html\" title=\"trait nom::traits::ExtendInto\">ExtendInto</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"nom/traits/trait.ExtendInto.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;T as <a class=\"trait\" href=\"nom/traits/trait.ExtendInto.html\" title=\"trait nom::traits::ExtendInto\">ExtendInto</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.ExtendInto.html#associatedtype.Item\" title=\"type nom::traits::ExtendInto::Item\">Item</a></h4></section></summary><div class='docblock'>The current input type is a sequence of that <code>Item</code> type. <a href=\"nom/traits/trait.ExtendInto.html#associatedtype.Item\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Extender\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Extender\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"nom/traits/trait.ExtendInto.html#associatedtype.Extender\" class=\"associatedtype\">Extender</a> = &lt;T as <a class=\"trait\" href=\"nom/traits/trait.ExtendInto.html\" title=\"trait nom::traits::ExtendInto\">ExtendInto</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.ExtendInto.html#associatedtype.Extender\" title=\"type nom::traits::ExtendInto::Extender\">Extender</a></h4></section></summary><div class='docblock'>The type that will be produced</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_builder\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#806\">source</a><a href=\"#method.new_builder\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.ExtendInto.html#tymethod.new_builder\" class=\"fn\">new_builder</a>(&amp;self) -&gt; &lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt; as <a class=\"trait\" href=\"nom/traits/trait.ExtendInto.html\" title=\"trait nom::traits::ExtendInto\">ExtendInto</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.ExtendInto.html#associatedtype.Extender\" title=\"type nom::traits::ExtendInto::Extender\">Extender</a></h4></section></summary><div class='docblock'>Create a new <code>Extend</code> of the correct type</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_into\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#811\">source</a><a href=\"#method.extend_into\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.ExtendInto.html#tymethod.extend_into\" class=\"fn\">extend_into</a>(&amp;self, acc: &amp;mut &lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt; as <a class=\"trait\" href=\"nom/traits/trait.ExtendInto.html\" title=\"trait nom::traits::ExtendInto\">ExtendInto</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.ExtendInto.html#associatedtype.Extender\" title=\"type nom::traits::ExtendInto::Extender\">Extender</a>)</h4></section></summary><div class='docblock'>Accumulate the input into an accumulator</div></details></div></details>","ExtendInto","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindToken%3CToken%3E-for-LocatedSpan%3CFragment,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#731\">source</a><a href=\"#impl-FindToken%3CToken%3E-for-LocatedSpan%3CFragment,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;Fragment, Token, X&gt; <a class=\"trait\" href=\"nom/traits/trait.FindToken.html\" title=\"trait nom::traits::FindToken\">FindToken</a>&lt;Token&gt; for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;Fragment, X&gt;<div class=\"where\">where\n    Fragment: <a class=\"trait\" href=\"nom/traits/trait.FindToken.html\" title=\"trait nom::traits::FindToken\">FindToken</a>&lt;Token&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_token\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#732\">source</a><a href=\"#method.find_token\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.FindToken.html#tymethod.find_token\" class=\"fn\">find_token</a>(&amp;self, token: Token) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Returns true if self contains the token</div></details></div></details>","FindToken<Token>","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-InputTake-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#541-543\">source</a><a href=\"#impl-InputTake-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"nom/traits/trait.InputTake.html\" title=\"trait nom::traits::InputTake\">InputTake</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;: <a class=\"trait\" href=\"nom/traits/trait.Slice.html\" title=\"trait nom::traits::Slice\">Slice</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/range/struct.RangeFrom.html\" title=\"struct core::ops::range::RangeFrom\">RangeFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>&gt;&gt; + <a class=\"trait\" href=\"nom/traits/trait.Slice.html\" title=\"trait nom::traits::Slice\">Slice</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.take\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#545\">source</a><a href=\"#method.take\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.InputTake.html#tymethod.take\" class=\"fn\">take</a>(&amp;self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;</h4></section></summary><div class='docblock'>Returns a slice of <code>count</code> bytes. panics if count &gt; length</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.take_split\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#549\">source</a><a href=\"#method.take_split\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.InputTake.html#tymethod.take_split\" class=\"fn\">take_split</a>(&amp;self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>) -&gt; (<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;, <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;)</h4></section></summary><div class='docblock'>Split the stream at the <code>count</code> byte offset. panics if count &gt; length</div></details></div></details>","InputTake","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Compare%3CB%3E-for-LocatedSpan%3CA,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#658\">source</a><a href=\"#impl-Compare%3CB%3E-for-LocatedSpan%3CA,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;A, B, X&gt; <a class=\"trait\" href=\"nom/traits/trait.Compare.html\" title=\"trait nom::traits::Compare\">Compare</a>&lt;B&gt; for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;A, X&gt;<div class=\"where\">where\n    A: <a class=\"trait\" href=\"nom/traits/trait.Compare.html\" title=\"trait nom::traits::Compare\">Compare</a>&lt;B&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;B&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#660\">source</a><a href=\"#method.compare\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.Compare.html#tymethod.compare\" class=\"fn\">compare</a>(&amp;self, t: B) -&gt; <a class=\"enum\" href=\"nom/traits/enum.CompareResult.html\" title=\"enum nom::traits::CompareResult\">CompareResult</a></h4></section></summary><div class='docblock'>Compares self to another value for equality</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.compare_no_case\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#665\">source</a><a href=\"#method.compare_no_case\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.Compare.html#tymethod.compare_no_case\" class=\"fn\">compare_no_case</a>(&amp;self, t: B) -&gt; <a class=\"enum\" href=\"nom/traits/enum.CompareResult.html\" title=\"enum nom::traits::CompareResult\">CompareResult</a></h4></section></summary><div class='docblock'>Compares self to another value for equality\nindependently of the case. <a href=\"nom/traits/trait.Compare.html#tymethod.compare_no_case\">Read more</a></div></details></div></details>","Compare<B>","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-AsBytes-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#529\">source</a><a href=\"#impl-AsBytes-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"nom/traits/trait.AsBytes.html\" title=\"trait nom::traits::AsBytes\">AsBytes</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nom/traits/trait.AsBytes.html\" title=\"trait nom::traits::AsBytes\">AsBytes</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_bytes\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#530\">source</a><a href=\"#method.as_bytes\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.AsBytes.html#tymethod.as_bytes\" class=\"fn\">as_bytes</a>(&amp;self) -&gt; &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.u8.html\">u8</a>] <a href=\"#\" class=\"tooltip\" data-notable-ty=\"&amp;[u8]\">ⓘ</a></h4></section></summary><div class='docblock'>Casts the input type to a byte slice</div></details></div></details>","AsBytes","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-InputIter-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#630-632\">source</a><a href=\"#impl-InputIter-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, X&gt; <a class=\"trait\" href=\"nom/traits/trait.InputIter.html\" title=\"trait nom::traits::InputIter\">InputIter</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nom/traits/trait.InputIter.html\" title=\"trait nom::traits::InputIter\">InputIter</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"nom/traits/trait.InputIter.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = &lt;T as <a class=\"trait\" href=\"nom/traits/trait.InputIter.html\" title=\"trait nom::traits::InputIter\">InputIter</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.InputIter.html#associatedtype.Item\" title=\"type nom::traits::InputIter::Item\">Item</a></h4></section></summary><div class='docblock'>The current input type is a sequence of that <code>Item</code> type. <a href=\"nom/traits/trait.InputIter.html#associatedtype.Item\">Read more</a></div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.Iter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Iter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"nom/traits/trait.InputIter.html#associatedtype.Iter\" class=\"associatedtype\">Iter</a> = &lt;T as <a class=\"trait\" href=\"nom/traits/trait.InputIter.html\" title=\"trait nom::traits::InputIter\">InputIter</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.InputIter.html#associatedtype.Iter\" title=\"type nom::traits::InputIter::Iter\">Iter</a></h4></section></summary><div class='docblock'>An iterator over the input type, producing the item and its position\nfor use with <a href=\"nom/traits/trait.Slice.html\" title=\"trait nom::traits::Slice\">Slice</a>. If we’re iterating over <code>&amp;str</code>, the position\ncorresponds to the byte index of the character</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IterElem\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IterElem\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"nom/traits/trait.InputIter.html#associatedtype.IterElem\" class=\"associatedtype\">IterElem</a> = &lt;T as <a class=\"trait\" href=\"nom/traits/trait.InputIter.html\" title=\"trait nom::traits::InputIter\">InputIter</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.InputIter.html#associatedtype.IterElem\" title=\"type nom::traits::InputIter::IterElem\">IterElem</a></h4></section></summary><div class='docblock'>An iterator over the input type, producing the item</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_indices\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#638\">source</a><a href=\"#method.iter_indices\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.InputIter.html#tymethod.iter_indices\" class=\"fn\">iter_indices</a>(&amp;self) -&gt; &lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt; as <a class=\"trait\" href=\"nom/traits/trait.InputIter.html\" title=\"trait nom::traits::InputIter\">InputIter</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.InputIter.html#associatedtype.Iter\" title=\"type nom::traits::InputIter::Iter\">Iter</a></h4></section></summary><div class='docblock'>Returns an iterator over the elements and their byte offsets</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_elements\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#642\">source</a><a href=\"#method.iter_elements\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.InputIter.html#tymethod.iter_elements\" class=\"fn\">iter_elements</a>(&amp;self) -&gt; &lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt; as <a class=\"trait\" href=\"nom/traits/trait.InputIter.html\" title=\"trait nom::traits::InputIter\">InputIter</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.InputIter.html#associatedtype.IterElem\" title=\"type nom::traits::InputIter::IterElem\">IterElem</a></h4></section></summary><div class='docblock'>Returns an iterator over the elements</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.position\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#646-648\">source</a><a href=\"#method.position\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.InputIter.html#tymethod.position\" class=\"fn\">position</a>&lt;P&gt;(&amp;self, predicate: P) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>&gt;<div class=\"where\">where\n    P: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(&lt;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt; as <a class=\"trait\" href=\"nom/traits/trait.InputIter.html\" title=\"trait nom::traits::InputIter\">InputIter</a>&gt;::<a class=\"associatedtype\" href=\"nom/traits/trait.InputIter.html#associatedtype.Item\" title=\"type nom::traits::InputIter::Item\">Item</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class='docblock'>Finds the byte position of the element</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice_index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#653\">source</a><a href=\"#method.slice_index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.InputIter.html#tymethod.slice_index\" class=\"fn\">slice_index</a>(&amp;self, count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"nom/internal/enum.Needed.html\" title=\"enum nom::internal::Needed\">Needed</a>&gt;</h4></section></summary><div class='docblock'>Get the byte offset from the element’s position in the stream</div></details></div></details>","InputIter","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Offset-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#757\">source</a><a href=\"#impl-Offset-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"nom/traits/trait.Offset.html\" title=\"trait nom::traits::Offset\">Offset</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.offset\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#758\">source</a><a href=\"#method.offset\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.Offset.html#tymethod.offset\" class=\"fn\">offset</a>(&amp;self, second: &amp;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Offset between the first byte of self and the first byte of the argument</div></details></div></details>","Offset","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#126\">source</a><a href=\"#impl-Debug-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#126\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-InputLength-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#535\">source</a><a href=\"#impl-InputLength-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"nom/traits/trait.InputLength.html\" title=\"trait nom::traits::InputLength\">InputLength</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nom/traits/trait.InputLength.html\" title=\"trait nom::traits::InputLength\">InputLength</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.input_len\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#536\">source</a><a href=\"#method.input_len\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.InputLength.html#tymethod.input_len\" class=\"fn\">input_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class='docblock'>Calculates the input length, as indicated by its name,\nand the name of the trait itself</div></details></div></details>","InputLength","mathml::parsers::generic_mathml::Span"],["<section id=\"impl-Copy-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#126\">source</a><a href=\"#impl-Copy-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,</div></h3></section>","Copy","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#767\">source</a><a href=\"#impl-Display-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/alloc/string/trait.ToString.html\" title=\"trait alloc::string::ToString\">ToString</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#768\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.77.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Slice%3CR%3E-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#697-699\">source</a><a href=\"#impl-Slice%3CR%3E-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, T, R, X&gt; <a class=\"trait\" href=\"nom/traits/trait.Slice.html\" title=\"trait nom::traits::Slice\">Slice</a>&lt;R&gt; for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    T: <a class=\"trait\" href=\"nom/traits/trait.Slice.html\" title=\"trait nom::traits::Slice\">Slice</a>&lt;R&gt; + <a class=\"trait\" href=\"nom/traits/trait.Offset.html\" title=\"trait nom::traits::Offset\">Offset</a> + <a class=\"trait\" href=\"nom/traits/trait.AsBytes.html\" title=\"trait nom::traits::AsBytes\">AsBytes</a> + <a class=\"trait\" href=\"nom/traits/trait.Slice.html\" title=\"trait nom::traits::Slice\">Slice</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.77.0/core/ops/range/struct.RangeTo.html\" title=\"struct core::ops::range::RangeTo\">RangeTo</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>&gt;&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.slice\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#701\">source</a><a href=\"#method.slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.Slice.html#tymethod.slice\" class=\"fn\">slice</a>(&amp;self, range: R) -&gt; <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;</h4></section></summary><div class='docblock'>Slices self according to the range argument</div></details></div></details>","Slice<R>","mathml::parsers::generic_mathml::Span"],["<section id=\"impl-Eq-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#527\">source</a><a href=\"#impl-Eq-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nom/traits/trait.AsBytes.html\" title=\"trait nom::traits::AsBytes\">AsBytes</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,</div></h3></section>","Eq","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#521\">source</a><a href=\"#impl-PartialEq-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nom/traits/trait.AsBytes.html\" title=\"trait nom::traits::AsBytes\">AsBytes</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#522\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.0/src/core/cmp.rs.html#242\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-ParseTo%3CR%3E-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#747-749\">source</a><a href=\"#impl-ParseTo%3CR%3E-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R, T, X&gt; <a class=\"trait\" href=\"nom/traits/trait.ParseTo.html\" title=\"trait nom::traits::ParseTo\">ParseTo</a>&lt;R&gt; for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/str/traits/trait.FromStr.html\" title=\"trait core::str::traits::FromStr\">FromStr</a>,\n    T: <a class=\"trait\" href=\"nom/traits/trait.ParseTo.html\" title=\"trait nom::traits::ParseTo\">ParseTo</a>&lt;R&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_to\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#752\">source</a><a href=\"#method.parse_to\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.ParseTo.html#tymethod.parse_to\" class=\"fn\">parse_to</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;R&gt;</h4></section></summary><div class='docblock'>Succeeds if <code>parse()</code> succeeded. The byte slice implementation\nwill first convert it to a <code>&amp;str</code>, then apply the <code>parse()</code> function</div></details></div></details>","ParseTo<R>","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#126\">source</a><a href=\"#impl-Clone-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, X&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    X: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#126\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.77.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.77.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","mathml::parsers::generic_mathml::Span"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FindSubstring%3CU%3E-for-LocatedSpan%3CT,+X%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#737-739\">source</a><a href=\"#impl-FindSubstring%3CU%3E-for-LocatedSpan%3CT,+X%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;T, U, X&gt; <a class=\"trait\" href=\"nom/traits/trait.FindSubstring.html\" title=\"trait nom::traits::FindSubstring\">FindSubstring</a>&lt;U&gt; for <a class=\"struct\" href=\"nom_locate/struct.LocatedSpan.html\" title=\"struct nom_locate::LocatedSpan\">LocatedSpan</a>&lt;T, X&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"nom/traits/trait.FindSubstring.html\" title=\"trait nom::traits::FindSubstring\">FindSubstring</a>&lt;U&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.find_substring\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nom_locate/lib.rs.html#742\">source</a><a href=\"#method.find_substring\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"nom/traits/trait.FindSubstring.html#tymethod.find_substring\" class=\"fn\">find_substring</a>(&amp;self, substr: U) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.77.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.77.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class='docblock'>Returns the byte position of the substring if it is found</div></details></div></details>","FindSubstring<U>","mathml::parsers::generic_mathml::Span"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()
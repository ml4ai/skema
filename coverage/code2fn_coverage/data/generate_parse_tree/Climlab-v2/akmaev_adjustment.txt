(module (future_import_statement name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (default_parameter name: (identifier) value: (float))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier))) right: (identifier)) right: (float)))) (comment) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (integer) (attribute object: (identifier) attribute: (identifier)))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (subscript value: (identifier) subscript: (slice (unary_operator argument: (integer)))))) right: (identifier)) (keyword_argument name: (identifier) value: (unary_operator argument: (integer))))))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (float) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (unary_operator argument: (integer))))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (slice (unary_operator argument: (integer)))))) (comment) (if_statement condition: (comparison_operator (identifier) (tuple)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (tuple (identifier) (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (tuple (identifier) (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (tuple (identifier) (identifier)))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier) subscript: (slice)) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (identifier) subscript: (slice)) (subscript value: (identifier) subscript: (identifier) subscript: (slice)) (subscript value: (identifier) subscript: (identifier) subscript: (slice)) (identifier) (identifier) (identifier) (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) right: (integer))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) right: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))))) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (true) (comment) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))))) (while_statement condition: (true) (comment) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) (identifier)) (comment) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))) (break_statement) (comment)) alternative: (else_clause body: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))))) (comment) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) (integer)) (comment) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) right: (subscript value: (identifier) subscript: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (integer))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) right: (binary_operator left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) right: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer)))))))) (comment) (comment) (expression_statement (augmented_assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))))) (expression_statement (augmented_assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))))) (expression_statement (augmented_assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) right: (identifier))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (if_statement condition: (comparison_operator (identifier) (integer)) (comment) consequence: (block (break_statement) (comment))) (expression_statement (augmented_assignment left: (identifier) right: (integer))) (comment)))))) (comment) (if_statement condition: (comparison_operator (identifier) (identifier)) (comment) consequence: (block (break_statement) (comment))) (expression_statement (augmented_assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) right: (identifier))) (comment))) (comment) (while_statement condition: (true) body: (block (while_statement condition: (true) (comment) body: (block (if_statement condition: (comparison_operator (identifier) (integer)) (comment) consequence: (block (break_statement) (comment))) (while_statement condition: (true) (comment) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) right: (identifier))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (break_statement))) (comment) (expression_statement (augmented_assignment left: (identifier) right: (integer))) (expression_statement (augmented_assignment left: (identifier) right: (integer))) (comment))))) (comment) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (break_statement))) (expression_statement (augmented_assignment left: (identifier) right: (integer))) (expression_statement (augmented_assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))))) (comment))) (return_statement (identifier)))) (comment) (comment) (comment) (comment) (try_statement body: (block (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier))))))) (except_clause (identifier) (block (pass_statement)))))
(module (expression_statement (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))) (future_import_statement name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (default_parameter name: (identifier) value: (attribute object: (identifier) attribute: (identifier))) (default_parameter name: (identifier) value: (attribute object: (identifier) attribute: (identifier))) (default_parameter name: (identifier) value: (integer)) (default_parameter name: (identifier) value: (attribute object: (identifier) attribute: (identifier)))) body: (block (expression_statement (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (comment) (comment) (if_statement condition: (comparison_operator (identifier) (integer)) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier)))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier)))))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (comparison_operator (binary_operator left: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (binary_operator left: (identifier) right: (integer))) right: (call function: (identifier) arguments: (argument_list (identifier)))) (float)) (comment) (call function: (identifier) arguments: (argument_list (binary_operator left: (unary_operator argument: (call function: (identifier) arguments: (argument_list (identifier)))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (comment) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (comparison_operator (binary_operator left: (identifier) right: (identifier)) (float)) (identifier) (float))))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))) right: (call function: (identifier) arguments: (argument_list (identifier)))) right: (binary_operator left: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier)))) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier) (identifier))))) (if_statement condition: (identifier) consequence: (block (return_statement (identifier))) alternative: (else_clause (comment) body: (block (return_statement (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier) (identifier)) (comment) body: (block (return_statement (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)) right: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (identifier))))))) right: (integer))) right: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (binary_operator left: (identifier) right: (integer)))) right: (integer)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (default_parameter name: (identifier) value: (float)) (default_parameter name: (identifier) value: (attribute object: (identifier) attribute: (identifier))) (default_parameter name: (identifier) value: (attribute object: (identifier) attribute: (identifier))) (default_parameter name: (identifier) value: (attribute object: (identifier) attribute: (identifier)))) body: (block (expression_statement (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier)))))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (parenthesized_expression (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (float))) right: (parenthesized_expression (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (integer) right: (identifier))))))) (float))))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (float))) right: (integer)) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier)))) right: (binary_operator left: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier)))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier) (identifier))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (float))))) (if_statement condition: (identifier) consequence: (block (return_statement (identifier))) alternative: (else_clause (comment) body: (block (return_statement (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (attribute object: (identifier) attribute: (identifier))) (default_parameter name: (identifier) value: (attribute object: (identifier) attribute: (identifier)))) body: (block (expression_statement (string (string_start) (string_content (escape_sequence)) (string_end))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (float))) right: (integer)) right: (identifier)) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (integer) right: (binary_operator left: (identifier) right: (integer))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (unary_operator argument: (integer)) right: (parenthesized_expression (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (binary_operator left: (identifier) right: (integer)) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (integer)))) right: (parenthesized_expression (binary_operator left: (integer) right: (identifier)))) right: (call function: (identifier) arguments: (argument_list (unary_operator argument: (identifier))))) right: (binary_operator left: (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (integer)) right: (parenthesized_expression (binary_operator left: (binary_operator left: (integer) right: (integer)) right: (identifier)))) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (unary_operator argument: (integer)) right: (identifier)))))) right: (binary_operator left: (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (integer)) right: (parenthesized_expression (binary_operator left: (binary_operator left: (integer) right: (integer)) right: (identifier)))) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (unary_operator argument: (integer)) right: (identifier)))))))) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (binary_operator left: (integer) right: (identifier)) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (integer))) right: (integer)))) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (identifier)))))) right: (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (integer))) right: (parenthesized_expression (binary_operator left: (identifier) right: (integer)))) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (identifier) right: (identifier)))))))) right: (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (integer))) right: (parenthesized_expression (binary_operator left: (identifier) right: (integer)))) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))))))))))) (return_statement (call function: (identifier) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (default_parameter name: (identifier) value: (none))) (comment) (comment) body: (block (expression_statement (assignment left: (identifier) right: (true))) (expression_statement (assignment left: (identifier) right: (true))) (expression_statement (assignment left: (identifier) right: (true))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (attribute object: (identifier) attribute: (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (false))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (list (identifier))) (keyword_argument name: (identifier) value: (list (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (attribute object: (identifier) attribute: (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (false))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (list (identifier))) (keyword_argument name: (identifier) value: (list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (boolean_operator left: (identifier) right: (identifier)))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (attribute object: (identifier) attribute: (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (false))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (list (identifier))) (keyword_argument name: (identifier) value: (list (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (identifier) right: (boolean_operator left: (identifier) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (return_statement (expression_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))) alternative: (else_clause body: (block (return_statement (expression_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)))))))))
(module (comment) (comment) (comment) (comment) (comment) (comment) (future_import_statement name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier) (identifier)) name: (dotted_name (identifier))) (class_definition name: (identifier) superclasses: (argument_list (attribute object: (identifier) attribute: (identifier))) body: (block (expression_statement (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (false))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) body: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (return_statement (none))) alternative: (else_clause body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (integer) (integer))))))) (except_clause (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))) (try_statement (comment) (comment) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (parenthesized_expression (binary_operator left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) attribute: (identifier)) arguments: (argument_list (identifier))))) (assert_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (comparison_operator (attribute object: (identifier) attribute: (identifier)) (identifier)))))) (except_clause (block (try_statement (comment) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (unary_operator argument: (integer))))) attribute: (identifier)) arguments: (argument_list (identifier))))) (assert_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (comparison_operator (attribute object: (identifier) attribute: (identifier)) (identifier))))) (comment) (comment) (comment)) (except_clause (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (comment) (comment) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) body: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (return_statement))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (try_statement body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier))))) (except_clause (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (none)))))) (try_statement body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier))))) (except_clause (block (pass_statement)))) (comment))) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) subscript: (identifier)))) (try_statement (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)))) (comment) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier))))))) (except_clause (comment) (comment) (block (pass_statement)))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (call function: (identifier) arguments: (argument_list (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) attribute: (identifier))))) (except_clause (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (try_statement (comment) body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) attribute: (identifier)))) (return_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (except_clause (comment) (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (return_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (identifier))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) (comment) (comment) (comment) body: (block (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)))))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (subscript value: (identifier) subscript: (slice) subscript: (attribute object: (identifier) attribute: (identifier)))))) (comment) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end)))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) attribute: (identifier)) (identifier) (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) (comment) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (integer) (integer)))))) (return_statement (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier))))))))
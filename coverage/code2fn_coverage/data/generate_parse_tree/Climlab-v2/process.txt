(module (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (future_import_statement name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier) (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier) (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (return_statement (dictionary))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (return_statement (identifier)))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (class_definition name: (identifier) superclasses: (argument_list (identifier)) body: (block (expression_statement (string (string_start) (string_content (escape_sequence) (escape_sequence)) (string_end))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))))) (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end)))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) body: (block (expression_statement (augmented_assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content (escape_sequence)) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) attribute: (identifier)))))))) (expression_statement (augmented_assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end)))) (expression_statement (augmented_assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end))) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (true)) (dictionary_splat_pattern (identifier))) (comment) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (comment) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (comment) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (comment) (comment) (if_statement condition: (comparison_operator (identifier) (none)) (comment) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list)))) alternative: (else_clause body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (identifier) body: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier)))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (comment) (comment) (comment) (comment) (comment) (comment))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier))))) (except_clause (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) alternative: (else_clause body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (identifier) value: (identifier)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (false))) (comment) (comment) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) (comment) (comment) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (default_parameter name: (identifier) value: (true))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))) (except_clause (identifier) (block (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (false))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content (escape_sequence)) (string_end))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (comment) consequence: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (identifier) value: (attribute object: (identifier) attribute: (identifier)))))))) alternative: (else_clause body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier))))) (except_clause (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier))))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))) (comment) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) (comment) body: (block (if_statement condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) attribute: (identifier)) (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) attribute: (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier))) (comment) consequence: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier))))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (expression_statement (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (identifier) value: (identifier))))))) (except_clause (block (raise_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)))))))) (comment) (comment) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (default_parameter name: (identifier) value: (none))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (default_parameter name: (identifier) value: (none))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (comment) (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))) (except_clause (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (false))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))) (return_statement (call function: (identifier) arguments: (argument_list (identifier))))) alternative: (else_clause body: (block (return_statement (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))))))) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary))) (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (try_statement (comment) (comment) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier))))) (except_clause (block (pass_statement)))))) (return_statement (identifier))))) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary))) (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (try_statement body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))) (except_clause (block (pass_statement)))))) (return_statement (identifier))))) (comment) (comment) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier))))) (except_clause (block (pass_statement)))))) (return_statement (identifier))) (except_clause (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))))) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier))))) (except_clause (block (pass_statement)))))) (return_statement (identifier))) (except_clause (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))))) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier))))) (except_clause (block (pass_statement)))))) (return_statement (identifier))) (except_clause (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))))) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier))))) (except_clause (block (pass_statement)))))) (return_statement (identifier))) (except_clause (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))))) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier))))) (except_clause (block (pass_statement)))))) (return_statement (identifier))) (except_clause (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))))) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier))))) (except_clause (block (pass_statement)))))) (return_statement (identifier))) (except_clause (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))))) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier))))) (except_clause (block (pass_statement)))))) (return_statement (identifier))) (except_clause (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))))) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier))))) (except_clause (block (pass_statement)))))) (return_statement (identifier))) (except_clause (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (identifier)))))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (return_statement (attribute object: (identifier) attribute: (identifier)))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) body: (block (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))) (return_statement (identifier)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))
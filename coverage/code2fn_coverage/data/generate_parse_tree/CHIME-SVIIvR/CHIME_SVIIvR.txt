(module (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (float) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)))) (comment) (return_statement (identifier)))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (if_statement condition: (comparison_operator (identifier) (integer)) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (integer))) (comment)) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (float) right: (parenthesized_expression (binary_operator left: (float) right: (identifier)))) right: (float)))) (comment)))) (return_statement (identifier)))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (unary_operator argument: (identifier)) right: (identifier)) right: (identifier)) right: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier))) right: (binary_operator left: (identifier) right: (identifier)))) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (integer) right: (identifier)))) right: (identifier)) right: (identifier))) right: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (integer) right: (identifier)))) right: (identifier)) right: (identifier)))) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)) right: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier))) right: (binary_operator left: (identifier) right: (identifier)))) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (integer) right: (identifier)))) right: (identifier)) right: (identifier)) right: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (integer) right: (identifier)))) right: (identifier)) right: (identifier))) right: (binary_operator left: (identifier) right: (identifier)))) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (binary_operator left: (identifier) right: (identifier))) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)) right: (identifier)) right: (identifier)))))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (comment) (return_statement (expression_list (identifier) (identifier) (identifier) (identifier) (identifier))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (comment) (identifier) (identifier) (identifier) (comment) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (comment)) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)) right: (identifier)) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (identifier))) (comment) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) (comment) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (comment) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) (comment) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)))) (comment) (expression_statement (augmented_assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier))))) (comment) (expression_statement (augmented_assignment left: (identifier) right: (integer))) (comment))))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (comment) (return_statement (expression_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier))) (comment))) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (float))) (comment) (expression_statement (assignment left: (identifier) right: (list (integer) (integer)))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer)))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (list (float) (float)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (float) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (float) right: (identifier)))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (float))) (comment) (expression_statement (assignment left: (identifier) right: (float))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (float)) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (integer)) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (float)) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (float)) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (float)) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (float)) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (float)) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (float)) right: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (float)) right: (identifier)))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (comment) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) (comment) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (comment) (subscript value: (identifier) subscript: (identifier)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (identifier)))) (comment))) (comment) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) (line_continuation) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (comment) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier))))) (return_statement (expression_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier))) (comment))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (integer)))) (expression_statement (assignment left: (pattern_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))))))) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))))
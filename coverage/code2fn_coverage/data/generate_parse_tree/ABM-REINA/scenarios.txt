(module (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (decorated_definition (decorator (identifier)) definition: (class_definition name: (identifier) body: (block (expression_statement (assignment left: (identifier) type: (type (identifier)))) (expression_statement (assignment left: (identifier) type: (type (identifier))))))) (class_definition name: (identifier) body: (block (expression_statement (assignment left: (identifier) type: (type (identifier)))) (expression_statement (assignment left: (identifier) type: (type (generic_type (identifier) (type_parameter (type (identifier)) (type (identifier))))))) (expression_statement (assignment left: (identifier) type: (type (identifier)))) (expression_statement (assignment left: (identifier) type: (type (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (dictionary))))) (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end))))) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier))))))) (return_statement (call function: (attribute object: (call function: (identifier) arguments: (argument_list (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) (identifier))) attribute: (identifier)) arguments: (argument_list))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (attribute object: (identifier) attribute: (identifier)) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))) (if_statement condition: (attribute object: (identifier) attribute: (identifier)) consequence: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))))))))) (class_definition name: (identifier) superclasses: (argument_list (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (list))))) (class_definition name: (identifier) superclasses: (argument_list (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer))))))) (class_definition name: (identifier) superclasses: (argument_list (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer))))))) (class_definition name: (identifier) superclasses: (argument_list (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (integer))))))) (class_definition name: (identifier) superclasses: (argument_list (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (attribute object: (call function: (identifier) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (integer)) right: (binary_operator left: (subscript value: (identifier) subscript: (integer)) right: (integer)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))))))) (expression_statement (assignment left: (identifier) right: (list (call function: (identifier) arguments: (argument_list)) (call function: (identifier) arguments: (argument_list)) (call function: (identifier) arguments: (argument_list)) (call function: (identifier) arguments: (argument_list)) (call function: (identifier) arguments: (argument_list))))))
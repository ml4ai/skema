(module (import_statement name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer))))) (for_statement left: (identifier) right: (subscript value: (identifier) subscript: (slice (integer))) body: (block (if_statement condition: (comparison_operator (binary_operator left: (identifier) right: (identifier)) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (identifier))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (default_parameter name: (identifier) value: (list))) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (unary_operator argument: (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (attribute object: (identifier) attribute: (identifier))))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) subscript: (list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (parenthesized_expression (binary_operator left: (identifier) right: (binary_operator left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (identifier))))) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (binary_operator left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (integer) right: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (parenthesized_expression (unary_operator argument: (parenthesized_expression (binary_operator left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (identifier)))))) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (binary_operator left: (parenthesized_expression (binary_operator left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) right: (subscript value: (identifier) subscript: (identifier))))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters) body: (block (if_statement condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (none))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (try_statement body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (except_clause (identifier) (block (pass_statement))))))) (return_statement (identifier)))))
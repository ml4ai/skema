(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier) (default_parameter name: (identifier) value: (false)) (default_parameter name: (identifier) value: (false))) body: (block (expression_statement (assignment left: (identifier) right: (dictionary))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (true)))) alternative: (else_clause body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (false))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (dictionary))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (integer)) right: (identifier)))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (true))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier)))) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (keyword_argument name: (identifier) value: (true)) (dictionary_splat (identifier)))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (integer)))) attribute: (identifier)) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (conditional_expression (attribute object: (identifier) attribute: (identifier)) (boolean_operator left: (identifier) right: (attribute object: (identifier) attribute: (identifier))) (none)))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (false)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)))) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (false)))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (not_operator argument: (identifier)) consequence: (block (continue_statement))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list (list_splat (identifier)) (identifier)))))) (expression_statement (assignment left: (identifier) right: (identifier))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (dictionary))))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (true)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (false)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_splat (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (identifier) (identifier) (identifier) (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (binary_operator left: (identifier) right: (integer))))))))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (call function: (identifier) arguments: (argument_list)) (integer)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (integer) (none) (keyword_argument name: (identifier) value: (true))))))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)))) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (none)))) (expression_statement (call function: (identifier) arguments: (argument_list (none)))))))
(module (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (class_definition name: (identifier) superclasses: (argument_list (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (attribute object: (identifier) attribute: (identifier)) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (pair key: (attribute object: (identifier) attribute: (identifier)) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (pair key: (attribute object: (identifier) attribute: (identifier)) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (pair key: (attribute object: (identifier) attribute: (identifier)) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (pair key: (attribute object: (identifier) attribute: (identifier)) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (pair key: (attribute object: (identifier) attribute: (identifier)) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (return_statement (subscript value: (identifier) subscript: (identifier))))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (tuple (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (decorated_definition (decorator (identifier)) definition: (class_definition name: (identifier) body: (block (expression_statement (assignment left: (identifier) type: (type (identifier)))) (expression_statement (assignment left: (identifier) type: (type (identifier)))) (expression_statement (assignment left: (identifier) type: (type (identifier)) right: (true)))))) (decorated_definition (decorator (identifier)) definition: (class_definition name: (identifier) superclasses: (argument_list (identifier)) body: (block (expression_statement (assignment left: (identifier) type: (type (identifier)) right: (none))) (expression_statement (assignment left: (identifier) type: (type (identifier)) right: (none))) (expression_statement (assignment left: (identifier) type: (type (identifier)) right: (none)))))) (decorated_definition (decorator (identifier)) definition: (class_definition name: (identifier) body: (block (expression_statement (assignment left: (identifier) type: (type (identifier)))) (expression_statement (assignment left: (identifier) type: (type (identifier))))))) (decorated_definition (decorator (identifier)) definition: (class_definition name: (identifier) superclasses: (argument_list (identifier)) body: (block (expression_statement (assignment left: (identifier) type: (type (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier))) right: (none)))))) (decorated_definition (decorator (identifier)) definition: (class_definition name: (identifier) body: (block (expression_statement (assignment left: (identifier) type: (type (identifier)))) (expression_statement (assignment left: (identifier) type: (type (identifier)))) (expression_statement (assignment left: (identifier) type: (type (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier))) right: (none))) (expression_statement (assignment left: (identifier) type: (type (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (identifier) subscript: (none)))) right: (none))) (expression_statement (assignment left: (identifier) type: (type (identifier)) right: (none))) (expression_statement (assignment left: (identifier) type: (type (identifier)) right: (none))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (none)) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (none)) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (dictionary))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (dictionary))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (identifier) arguments: (argument_list (identifier))) subscript: (slice (integer))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) body: (block (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier)))) consequence: (block (break_statement))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (continue_statement))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (assert_statement (boolean_operator left: (comparison_operator (identifier) (none)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))) consequence: (block (break_statement)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)))))))) (expression_statement (assignment left: (identifier) right: (identifier)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (none))))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (attribute object: (identifier) attribute: (identifier))) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (dictionary))) (if_statement condition: (not_operator argument: (attribute object: (identifier) attribute: (identifier))) consequence: (block (return_statement (identifier)))) (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (continue_statement))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (call function: (identifier) arguments: (argument_list (identifier)))))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (attribute object: (identifier) attribute: (identifier))) right: (identifier))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (for_statement left: (identifier) right: (boolean_operator left: (attribute object: (identifier) attribute: (identifier)) right: (list)) body: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (identifier)) consequence: (block (break_statement)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)))))))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (none)) right: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier))))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (attribute object: (identifier) attribute: (identifier))) right: (identifier)))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))) consequence: (block (break_statement)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (tuple (identifier) (identifier))))))))) (expression_statement (assignment left: (identifier) right: (identifier))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (attribute object: (identifier) attribute: (identifier))) right: (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (pass_statement)) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (conditional_expression (attribute object: (identifier) attribute: (identifier)) (identifier) (none))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (return_statement (list (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier)) (list_splat (identifier))))))))) (expression_statement (assignment left: (identifier) right: (list (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))))) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))))) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (false)))) (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (false)))) (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (list_comprehension body: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (for_in_clause left: (identifier) right: (identifier)))) (keyword_argument name: (identifier) value: (false)))))))) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))) (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (false)))) (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (false)))) (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (list_comprehension body: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (for_in_clause left: (identifier) right: (identifier)))) (keyword_argument name: (identifier) value: (false)))))))) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (false)))) (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (false)))))))) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (list_comprehension body: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (integer)) (subscript value: (identifier) subscript: (integer)))) (for_in_clause left: (identifier) right: (identifier)))) (keyword_argument name: (identifier) value: (false)))))))) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (list_splat (list_comprehension body: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (identifier))))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (false)))) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (identifier)))))))) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (list (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (keyword_argument name: (identifier) value: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))))))))) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))) consequence: (block (break_statement)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (integer)))))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (none))) body: (block (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))) (if_statement condition: (identifier) consequence: (block (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (identifier)) consequence: (block (break_statement)))) alternative: (else_clause body: (block (raise_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (list))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))))) (return_statement (identifier)))))
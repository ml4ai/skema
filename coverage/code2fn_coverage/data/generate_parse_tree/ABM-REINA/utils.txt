(module (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (dictionary))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))) (return_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list (identifier)))))))) (expression_statement (assignment left: (identifier) right: (boolean_operator left: (attribute object: (identifier) attribute: (identifier)) right: (dictionary)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (expression_statement (assignment left: (identifier) right: (boolean_operator left: (attribute object: (identifier) attribute: (identifier)) right: (list)))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (identifier) arguments: (argument_list (identifier))) (for_in_clause left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (continue_statement))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (return_statement (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier))))) (if_statement condition: (attribute object: (identifier) attribute: (identifier)) consequence: (block (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (except_clause (identifier) (block (expression_statement (assignment left: (identifier) right: (none)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))))))))))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (none))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (none))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (dictionary_comprehension body: (pair key: (identifier) value: (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier))))) (for_in_clause left: (identifier) right: (identifier))) (keyword_argument name: (identifier) value: (true)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (tuple (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier))))))) (return_statement (binary_operator left: (string (string_start) (string_content) (string_end)) right: (tuple (identifier) (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) attribute: (identifier)) arguments: (argument_list)) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none))) body: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (tuple (identifier) (identifier) (identifier))))) (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary_comprehension body: (pair key: (identifier) value: (identifier)) (for_in_clause left: (identifier) right: (identifier))))))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (tuple (identifier) (identifier) (identifier))))) (if_statement condition: (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary_comprehension body: (pair key: (identifier) value: (identifier)) (for_in_clause left: (identifier) right: (identifier))))))) (for_statement left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (comment) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (tuple (identifier) (identifier))))) (for_statement left: (identifier) right: (identifier) body: (block (assert_statement (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (tuple (identifier) (identifier))))) (for_statement left: (identifier) right: (identifier) body: (block (assert_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (decorated_definition (decorator (call function: (identifier) arguments: (argument_list (identifier)))) definition: (function_definition name: (identifier) parameters: (parameters (list_splat_pattern (identifier)) (dictionary_splat_pattern (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (comparison_operator (call function: (attribute object: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end)))) attribute: (identifier)) arguments: (argument_list)) (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (false))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (false))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (none))))) (if_statement condition: (identifier) consequence: (block (for_statement left: (identifier) right: (identifier) body: (block (assert_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (tuple (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier)))))) (assert_statement (comparison_operator (string (string_start) (string_content) (string_end)) (identifier))) (assert_statement (comparison_operator (string (string_start) (string_content) (string_end)) (identifier))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) right: (call function: (identifier) arguments: (argument_list (list (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (boolean_operator left: (boolean_operator left: (not_operator argument: (identifier)) right: (not_operator argument: (identifier))) right: (not_operator argument: (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (true)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (false)))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (identifier) (none)) (comment) consequence: (block (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier))))))) (return_statement (identifier)))) (if_statement condition: (identifier) consequence: (block (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier))))))) (return_statement (none)))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (dictionary_comprehension body: (pair key: (identifier) value: (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier))))) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (delete_statement (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (dictionary_comprehension body: (pair key: (identifier) value: (subscript value: (identifier) subscript: (identifier))) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (list_splat (identifier)) (dictionary_splat (identifier)))))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (if_statement condition: (identifier) consequence: (block (assert_statement (comparison_operator (identifier) (none))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (integer))))))) (return_statement (identifier))))) (return_statement (identifier)))) (return_statement (identifier)))))
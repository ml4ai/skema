(module (expression_statement (string (string_start) (string_content) (string_end))) (import_from_statement module_name: (relative_import (import_prefix) (dotted_name (identifier))) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (float)) (default_parameter name: (identifier) value: (float)) (default_parameter name: (identifier) value: (float))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (float) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (binary_operator left: (unary_operator argument: (identifier)) right: (identifier)) right: (identifier)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (return_statement (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (binary_operator left: (binary_operator left: (binary_operator left: (float) right: (identifier)) right: (parenthesized_expression (binary_operator left: (identifier) right: (identifier)))) right: (parenthesized_expression (comparison_operator (identifier) (identifier))))) right: (binary_operator left: (binary_operator left: (binary_operator left: (float) right: (identifier)) right: (parenthesized_expression (binary_operator left: (identifier) right: (identifier)))) right: (parenthesized_expression (comparison_operator (identifier) (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (return_statement (parenthesized_expression (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (binary_operator left: (binary_operator left: (binary_operator left: (float) right: (identifier)) right: (parenthesized_expression (binary_operator left: (identifier) right: (identifier)))) right: (call function: (identifier) arguments: (argument_list (unary_operator argument: (identifier)) (keyword_argument name: (identifier) value: (unary_operator argument: (identifier))) (keyword_argument name: (identifier) value: (binary_operator left: (float) right: (identifier))))))) right: (binary_operator left: (binary_operator left: (binary_operator left: (float) right: (identifier)) right: (parenthesized_expression (binary_operator left: (identifier) right: (identifier)))) right: (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (binary_operator left: (float) right: (identifier))))))))))) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (default_parameter name: (identifier) value: (false)) (default_parameter name: (identifier) value: (false)) (default_parameter name: (identifier) value: (false))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list_comprehension body: (binary_operator left: (binary_operator left: (integer) right: (subscript value: (identifier) subscript: (binary_operator left: (unary_operator argument: (identifier)) right: (integer)))) right: (subscript value: (identifier) subscript: (identifier))) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list_comprehension body: (list (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (binary_operator left: (unary_operator argument: (identifier)) right: (integer)))) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))))) (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (float)))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (float) right: (parenthesized_expression (binary_operator left: (identifier) right: (float)))) right: (parenthesized_expression (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (integer)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (identifier))))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (subscript value: (identifier) subscript: (slice) subscript: (integer)) (subscript value: (identifier) subscript: (slice) subscript: (integer)) (identifier)))))))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (parenthesized_expression (binary_operator left: (binary_operator left: (float) right: (parenthesized_expression (binary_operator left: (identifier) right: (float)))) right: (parenthesized_expression (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (integer)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (identifier))))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (subscript value: (identifier) subscript: (ellipsis) subscript: (none)) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (none) subscript: (ellipsis)) (subscript value: (identifier) subscript: (slice) subscript: (integer)) (subscript value: (identifier) subscript: (slice) subscript: (integer)) (subscript value: (identifier) subscript: (ellipsis) subscript: (none))))) (keyword_argument name: (identifier) value: (integer))))))))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (binary_operator left: (subscript value: (identifier) subscript: (identifier)) right: (parenthesized_expression (binary_operator left: (subscript value: (identifier) subscript: (identifier)) right: (float)))))))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))) (return_statement (identifier))))))
(module (expression_statement (string (string_start) (string_content) (string_end))) (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier) (identifier) (identifier) (identifier)) alias: (identifier))) (import_statement name: (dotted_name (identifier) (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier) (identifier)) alias: (identifier))) (import_statement name: (dotted_name (identifier) (identifier))) (comment) (comment) (import_statement name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (false))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (false))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (integer))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end))) (default_parameter name: (identifier) value: (none))) (comment) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (slice)) right: (identifier))))) (return_statement (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (if_statement condition: (comparison_operator (list_comprehension body: (call function: (identifier) arguments: (argument_list (identifier))) (for_in_clause left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (list (integer) (integer) (integer))) consequence: (block (expression_statement (assignment left: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) right: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (list (string (string_start) (string_content) (string_end)))))))) (function_definition name: (identifier) parameters: (parameters (list_splat_pattern (identifier)) (dictionary_splat_pattern (identifier))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (attribute object: (subscript value: (identifier) subscript: (integer)) attribute: (identifier)) (integer)) consequence: (block (return_statement (call function: (identifier) arguments: (argument_list (list_splat (identifier)) (dictionary_splat (identifier)))))) alternative: (else_clause body: (block (return_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (list_splat (identifier)) (dictionary_splat (identifier)))))))))) (expression_statement (assignment left: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) right: (identifier))))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (comment) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (comment) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (class_definition name: (identifier) superclasses: (argument_list (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (none))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement))) (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) subscript: (integer)) subscript: (integer)))))) subscript: (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (decorated_definition (decorator (call function: (identifier) arguments: (argument_list (identifier)))) definition: (function_definition name: (identifier) parameters: (parameters (list_splat_pattern (identifier)) (dictionary_splat_pattern (identifier))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (return_statement (call function: (identifier) arguments: (argument_list (list_splat (identifier)) (dictionary_splat (identifier))))))) (for_statement left: (identifier) right: (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) body: (block (if_statement condition: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (return_statement (call function: (identifier) arguments: (argument_list (list_splat (identifier)) (dictionary_splat (identifier)))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (false)) (default_parameter name: (identifier) value: (none))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (import_statement name: (dotted_name (identifier))) (comment) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (integer)))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (return_statement (integer)))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier))))) (comment) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier))) (return_statement (identifier)))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (comment) (comment) (if_statement condition: (comparison_operator (call function: (attribute object: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) (integer)) consequence: (block (with_statement (with_clause (with_item value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (identifier))))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier))))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (return_statement (identifier)))) (for_statement left: (identifier) right: (tuple (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) (none) (identifier))))))) (import_statement name: (dotted_name (identifier))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier)))) alternative: (elif_clause condition: (identifier) consequence: (block (import_statement name: (dotted_name (identifier))) (comment) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (true)) (keyword_argument name: (identifier) value: (true))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) (keyword_argument name: (identifier) value: (identifier))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier)))))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (attribute object: (call function: (identifier) arguments: (argument_list (identifier))) attribute: (identifier))) consequence: (block (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier))))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (return_statement (identifier)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (slice)) right: (identifier))) (return_statement (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (comment) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (comment) (function_definition name: (identifier) parameters: (parameters (list_splat_pattern (identifier)) (dictionary_splat_pattern (identifier))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list_splat (identifier)) (dictionary_splat (identifier)))))) (comment) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (attribute object: (identifier) attribute: (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (return_statement (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))) (import_statement name: (dotted_name (identifier) (identifier) (identifier))) (import_statement name: (dotted_name (identifier) (identifier) (identifier))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (true))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (attribute object: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier) (identifier) (identifier)) alias: (identifier))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (comment) (return_statement (integer)))))
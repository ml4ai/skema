(module (import_statement name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (default_parameter name: (identifier) value: (integer)) (default_parameter name: (identifier) value: (integer))) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (comment) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end))) (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) (comment) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (assert_statement (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (assert_statement (parenthesized_expression (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (integer))))) (expression_statement (assignment left: (identifier) right: (list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (slice (integer))))))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (identifier))) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (comparison_operator (identifier) (call function: (identifier) arguments: (argument_list (identifier)))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))))) (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (assert_statement (parenthesized_expression (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))) (integer))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (integer) right: (identifier)) (integer))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (binary_operator left: (integer) right: (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier)))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (not_operator argument: (attribute object: (identifier) attribute: (identifier))) (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (subscript value: (call function: (attribute object: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) subscript: (integer))) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))) (keyword_argument name: (identifier) value: (conditional_expression (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) (if_statement condition: (not_operator argument: (attribute object: (identifier) attribute: (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (try_statement body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (if_statement condition: (not_operator argument: (attribute object: (identifier) attribute: (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))))))) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list))))) (except_clause (identifier) (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list)))))) (if_statement condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (none))) consequence: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier)))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (integer)))))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (integer))) (comment)))) (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (identifier) arguments: (argument_list))))) (for_statement left: (identifier) right: (identifier) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (if_statement condition: (not_operator argument: (attribute object: (identifier) attribute: (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))) (string (string_start) (string_content) (string_end))))))) (if_statement condition: (not_operator argument: (attribute object: (identifier) attribute: (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (comment) (expression_statement (assignment left: (identifier) right: (tuple (identifier) (identifier) (identifier) (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)))))) (comment) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (if_statement condition: (not_operator argument: (attribute object: (identifier) attribute: (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))))))) (if_statement condition: (not_operator argument: (attribute object: (identifier) attribute: (identifier))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))))))
(module (expression_statement (string (string_start) (string_content) (string_end))) (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (dotted_name (identifier))) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (dictionary))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (dictionary))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (none))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (attribute object: (identifier) attribute: (identifier)) (for_in_clause left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (if_clause (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) subscript: (unary_operator argument: (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))) (if_statement condition: (boolean_operator left: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) alternative: (else_clause body: (block (raise_statement (parenthesized_expression (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (dictionary))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list_comprehension body: (attribute object: (identifier) attribute: (identifier)) (for_in_clause left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (if_clause (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (for_statement left: (identifier) right: (identifier) body: (block (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))) alias: (as_pattern_target (identifier))))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (none)) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))))) (assert_statement (parenthesized_expression (comparison_operator (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (subscript value: (identifier) subscript: (identifier)) (for_in_clause left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (subscript value: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) subscript: (identifier)) right: (list))) (for_statement left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) body: (block (if_statement condition: (comparison_operator (subscript value: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) subscript: (unary_operator argument: (integer))) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (subscript value: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) subscript: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (keyword_argument name: (identifier) value: (integer))))))))))))))))))
(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (integer)))) (assert_statement (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (integer)))) (float)))) (true))) (assert_statement (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (identifier))) (assert_statement (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (identifier))) (assert_statement (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) (float))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (augmented_assignment left: (identifier) right: (binary_operator left: (binary_operator left: (subscript value: (identifier) subscript: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (identifier))) right: (subscript value: (identifier) subscript: (identifier))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (return_statement (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (list (float) (float) (float) (integer)))) (expression_statement (assignment left: (identifier) right: (list (float) (float) (float) (float)))) (expression_statement (assignment left: (identifier) right: (list (float) (float) (float) (float)))) (expression_statement (assignment left: (identifier) right: (list (float) (float) (float) (float)))) (expression_statement (assignment left: (identifier) right: (list (integer) (float) (float) (float)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (identifier) (identifier) (identifier) (identifier) (identifier)))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (float) (float) (float) (float) (float)))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (integer) (float) (float) (float) (float)))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier)))))))))
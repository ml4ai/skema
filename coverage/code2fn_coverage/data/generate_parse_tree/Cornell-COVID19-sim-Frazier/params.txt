(module (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (list (float) (float) (float) (integer)) (line_continuation) (list (float) (float) (float) (float)) (line_continuation) (list (float) (float) (float) (float)) (line_continuation) (list (float) (float) (float) (float)) (line_continuation) (list (float) (float) (float) (float))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (list (float) (float) (float) (float)) (line_continuation) (list (float) (float) (float) (float)) (line_continuation) (list (float) (float) (float) (float)) (line_continuation) (list (float) (float) (float) (float)) (line_continuation) (list (float) (float) (float) (float))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (list (float) (float) (float) (float)) (line_continuation) (list (float) (float) (float) (float)) (line_continuation) (list (float) (float) (float) (float)) (line_continuation) (list (float) (float) (float) (float)) (line_continuation) (list (float) (float) (float) (float))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (float) (float) (float) (float) (float)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (integer) (float) (float) (float) (float)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (slice (integer))))))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (identifier))) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (comparison_operator (identifier) (call function: (identifier) arguments: (argument_list (identifier)))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))))) (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (assert_statement (parenthesized_expression (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))) (integer))))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (comment) (comment) (class_definition name: (identifier) body: (block (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (assert_statement (parenthesized_expression (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (assert_statement (parenthesized_expression (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (call function: (identifier) arguments: (argument_list (true)))))) (assert_statement (parenthesized_expression (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (integer)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (integer))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (integer)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (tuple (binary_operator left: (float) right: (float)) (integer) (binary_operator left: (float) right: (float))) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (subscript value: (identifier) subscript: (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (subscript value: (tuple (float) (integer) (float)) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (integer) right: (identifier)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (tuple (integer) (integer) (integer)) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)))))) (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (subscript value: (tuple (float) (float) (float)) subscript: (identifier)))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (subscript value: (tuple (float) (float) (float)) subscript: (identifier))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (subscript value: (tuple (float) (float) (float)) subscript: (identifier))))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (assert_statement (parenthesized_expression (comparison_operator (identifier) (integer)))) (expression_statement (assignment left: (identifier) right: (subscript value: (tuple (integer) (integer) (integer)) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (float))) (comment) (expression_statement (assignment left: (identifier) right: (float))) (expression_statement (assignment left: (identifier) right: (float))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (float)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer)))))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer))))) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer))))) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier))))) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))) (pair key: (string (string_start) (string_content) (string_end)) value: (parenthesized_expression (lambda parameters: (lambda_parameters (identifier)) body: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (float)))))) (pair key: (string (string_start) (string_content) (string_end)) value: (parenthesized_expression (lambda parameters: (lambda_parameters (identifier)) body: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (float)))))) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (comment) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (true)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))))))))
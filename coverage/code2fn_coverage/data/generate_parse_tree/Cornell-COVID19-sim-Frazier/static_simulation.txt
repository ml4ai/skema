(module (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (return_statement (integer))) alternative: (else_clause body: (block (return_statement (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier)))))))))) (class_definition name: (identifier) (comment) (comment) body: (block (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier)) (comment) (comment) (comment) (comment) (comment) body: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list))) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (boolean_operator left: (comparison_operator (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) (integer)) right: (comparison_operator (identifier) (integer))) body: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list))) (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (if_statement condition: (comparison_operator (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) (integer)) consequence: (block (raise_statement (parenthesized_expression (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (pattern_list (attribute object: (identifier) attribute: (identifier)) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (pattern_list (tuple_pattern (identifier) (identifier)) (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) body: (block (if_statement condition: (identifier) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (tuple (identifier) (identifier)) (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier))) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer)))))) alternative: (elif_clause condition: (comparison_operator (tuple (identifier) (identifier)) (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier))) (comment) consequence: (block (expression_statement (augmented_assignment left: (identifier) right: (integer)))))))) (return_statement (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) (comment) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (integer)) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (integer)) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (integer)) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (integer)) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (integer)) right: (identifier)))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list_comprehension body: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))))))) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list_comprehension body: (call function: (identifier) arguments: (argument_list (identifier) (binary_operator left: (identifier) right: (identifier)))) (for_in_clause left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) right: (identifier)))) (comment) (return_statement (expression_list (identifier) (identifier) (identifier) (identifier))))) (decorated_definition (decorator (identifier)) definition: (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)) (keyword_argument name: (identifier) value: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (float)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer))))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))
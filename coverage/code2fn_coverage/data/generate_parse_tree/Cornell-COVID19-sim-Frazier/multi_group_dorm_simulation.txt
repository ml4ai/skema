(module (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (comment) (class_definition name: (identifier) superclasses: (argument_list (identifier)) body: (block (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (comment) (identifier) (comment) (identifier) (comment) (identifier) (comment) (identifier) (comment) (identifier) (comment) (identifier) (comment) (identifier) (comment) (identifier) (comment) (default_parameter name: (identifier) value: (integer)) (comment) (default_parameter name: (identifier) value: (float)) (comment) (default_parameter name: (identifier) value: (float)) (comment) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (integer)) (default_parameter name: (identifier) value: (integer)) (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end)))) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (dictionary_comprehension body: (pair key: (identifier) value: (integer)) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (dictionary_comprehension body: (pair key: (identifier) value: (unary_operator argument: (integer))) (for_in_clause left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (expression_statement (assignment left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (tuple (identifier) (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (identifier)))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (integer) (identifier))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (comment) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (list (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (identifier) right: (integer))))) right: (identifier)) right: (list (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (list (integer) (identifier))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier) subscript: (slice)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (comment) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (comment) (comment) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (identifier))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (integer)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (list (identifier)) right: (identifier)) right: (list (identifier))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer)) subscript: (slice)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (attribute object: (call function: (identifier) arguments: (argument_list)) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (comment) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))) (if_statement condition: (attribute object: (identifier) attribute: (identifier)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))) (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (assignment left: (identifier) right: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (integer)) attribute: (identifier)))) (for_statement left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (slice (integer))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))))) (if_statement condition: (attribute object: (identifier) attribute: (identifier)) consequence: (block (return_statement (expression_list (identifier) (identifier) (identifier)))) alternative: (else_clause body: (block (return_statement (expression_list (identifier) (identifier)))))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))) right: (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) (attribute object: (identifier) attribute: (identifier)))) (comment) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) (integer)) right: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier)))) (comment) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) (integer)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))) (comment) (comment))))) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) attribute: (identifier)) (integer)) right: (comparison_operator (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) attribute: (identifier)) (integer))) consequence: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (integer)))) alternative: (else_clause body: (block (expression_statement (augmented_assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (integer)))))))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (assert_statement (parenthesized_expression (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))))) (expression_statement (assignment left: (identifier) right: (false))) (comment) (if_statement condition: (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) (unary_operator argument: (integer))) consequence: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (integer) (attribute object: (identifier) attribute: (identifier))))))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) (integer)) consequence: (block (expression_statement (augmented_assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (integer))))) alternative: (else_clause (comment) body: (block (expression_statement (assignment left: (identifier) right: (true)))))) (comment) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (return_statement))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (integer)))) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier) subscript: (identifier)) right: (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (subscript value: (identifier) subscript: (identifier) subscript: (identifier))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier) subscript: (identifier)) right: (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (subscript value: (identifier) subscript: (identifier) subscript: (identifier))))))))) (expression_statement (assignment left: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) (comment) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (assert_statement (parenthesized_expression (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (unary_operator argument: (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (integer)))) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier) subscript: (identifier)) right: (binary_operator left: (subscript value: (identifier) subscript: (identifier) subscript: (identifier)) right: (attribute object: (identifier) attribute: (identifier))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier) subscript: (identifier)) right: (binary_operator left: (subscript value: (identifier) subscript: (identifier) subscript: (identifier)) right: (attribute object: (identifier) attribute: (identifier))))))))) (expression_statement (assignment left: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))))
(module (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (integer)) (default_parameter name: (identifier) value: (float)) (default_parameter name: (identifier) value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (float)))) (default_parameter name: (identifier) value: (float)) (default_parameter name: (identifier) value: (integer)) (default_parameter name: (identifier) value: (integer)) (default_parameter name: (identifier) value: (float)) (default_parameter name: (identifier) value: (integer)) (default_parameter name: (identifier) value: (integer))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (integer)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (integer)) right: (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (integer)))))) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (comparison_operator (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))) (subscript value: (identifier) subscript: (integer))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (comment) (comment) (comment) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) (comment) (comment) (comment) body: (block (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) consequence: (block (if_statement condition: (comparison_operator (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (integer) (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) right: (subscript value: (identifier) subscript: (identifier))))) (integer)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (integer))))))))) (comment) (comment) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))) (integer)) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (binary_operator left: (unary_operator argument: (integer)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (integer) right: (subscript value: (identifier) subscript: (identifier)))))) (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (identifier)))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (identifier) (identifier)))))) (comment) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (comparison_operator (identifier) (identifier)))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (slice) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier) (integer))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier) subscript: (identifier)) right: (integer))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (identifier)) right: (integer))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (comparison_operator (identifier) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (comment) (comment) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) consequence: (block (for_statement left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier) subscript: (slice)))) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (integer))))))))))) (comment) (comment) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) right: (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) right: (identifier)))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer))))) right: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) right: (identifier)))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer))))) right: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))))))))))) (return_statement (expression_list (identifier) (identifier) (identifier) (identifier))))))
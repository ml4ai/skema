(module (expression_statement (string (string_start) (string_content) (string_end))) (comment) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (comment) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (relative_import (import_prefix)) name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (relative_import (import_prefix)) name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (relative_import (import_prefix)) name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (relative_import (import_prefix)) name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (relative_import (import_prefix)) name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (relative_import (import_prefix)) name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (relative_import (import_prefix)) name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (relative_import (import_prefix)) name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (comment) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (true)) (default_parameter name: (identifier) value: (false)) (default_parameter name: (identifier) value: (false)) (default_parameter name: (identifier) value: (none)) (dictionary_splat_pattern (identifier))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (comment) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (comment) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (not_operator argument: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (if_statement condition: (identifier) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (identifier))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (boolean_operator left: (identifier) right: (identifier)) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (comment) (if_statement condition: (boolean_operator left: (attribute object: (identifier) attribute: (identifier)) right: (not_operator argument: (identifier))) consequence: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier)))))) (return_statement (attribute object: (identifier) attribute: (identifier))) (comment)) alternative: (elif_clause condition: (boolean_operator left: (attribute object: (identifier) attribute: (identifier)) right: (comparison_operator (identifier) (none))) consequence: (block (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (none))) (comment)))) (comment) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier)) (dictionary_splat (identifier))))))) (comment) alternative: (else_clause body: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (if_statement condition: (comparison_operator (identifier) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier)) (dictionary_splat (identifier)))))) (comment)) alternative: (else_clause (comment) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (raise_statement (call function: (identifier) arguments: (argument_list (identifier)))))))))))) (comment) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (none)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))))) (comment) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier)) (keyword_argument name: (identifier) value: (identifier))))) (if_statement condition: (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier)))) right: (not_operator argument: (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (keyword_argument name: (identifier) value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (keyword_argument name: (identifier) value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) (comment)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list)) format_specifier: (format_specifier)) (string_content) (string_end)) (integer) (identifier)))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (default_parameter name: (identifier) value: (true))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (try_statement body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (comment)) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_end)))) (raise_statement (call function: (identifier) arguments: (argument_list (identifier))) cause: (identifier))))) (comment) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (string_end)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_end)))) (raise_statement (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)))) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier) format_specifier: (format_specifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (raise_statement (call function: (identifier) arguments: (argument_list (identifier)))))))) (if_statement condition: (boolean_operator left: (boolean_operator left: (parenthesized_expression (comparison_operator (string (string_start) (string_content) (string_end)) (identifier))) right: (parenthesized_expression (not_operator argument: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end))))))) right: (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (return_statement))) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (true)) (default_parameter name: (identifier) value: (true)) (default_parameter name: (identifier) value: (float)) (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end))) (dictionary_splat_pattern (identifier))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))))) (if_statement condition: (identifier) consequence: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content) (string_end)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))) (if_statement condition: (identifier) consequence: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))) right: (binary_operator left: (identifier) right: (integer)))) (comment)) alternative: (elif_clause condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_content) (string_end)) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (integer)) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content) (string_end)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (integer) (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (slice) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (subscript value: (identifier) subscript: (slice) subscript: (integer)) right: (integer)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (slice) subscript: (integer)))) (expression_statement (augmented_assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (subscript value: (identifier) subscript: (identifier)) right: (binary_operator left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier))))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (dictionary))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (comment) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (dictionary_splat (identifier))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (dictionary_splat (identifier)))))))) alternative: (else_clause (comment) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (raise_statement (call function: (identifier) arguments: (argument_list (identifier))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) arguments: (argument_list)))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (default_parameter name: (identifier) value: (float)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (comment) (expression_statement (assignment left: (identifier) right: (list))) (comment) (expression_statement (assignment left: (identifier) right: (list))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (binary_operator left: (identifier) right: (identifier)) right: (identifier)))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)))))) (comment) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (comment)) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)))))) (comment)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (parenthesized_expression (binary_operator left: (identifier) right: (float))) attribute: (identifier)) arguments: (argument_list)) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (slice (identifier) (binary_operator left: (identifier) right: (identifier)))))) (comment) (expression_statement (augmented_assignment left: (identifier) right: (identifier))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (list (identifier)) right: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (default_parameter name: (identifier) value: (none))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (comment) (expression_statement (assignment left: (identifier) right: (list))) (comment) (expression_statement (assignment left: (identifier) right: (list))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (identifier))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (unary_operator argument: (integer)))) (while_statement condition: (comparison_operator (identifier) (integer)) body: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (comment) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (identifier) right: (identifier))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (for_statement left: (identifier) right: (identifier) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list)))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (list (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier)))))))) (expression_statement (augmented_assignment left: (identifier) right: (identifier))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))) (identifier))))) (comment) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (list (integer) (integer)))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (list (integer) (integer)))))) (expression_statement (assignment left: (identifier) right: (dictionary))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (identifier) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (identifier) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer)))) right: (parenthesized_expression (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer))))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (parenthesized_expression (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer)))) right: (parenthesized_expression (comparison_operator (identifier) (subscript value: (identifier) subscript: (integer))))))))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (identifier)))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (default_parameter name: (identifier) value: (none)) (dictionary_splat_pattern (identifier))) (comment) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (comment)) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (comment) (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (raise_statement (call function: (identifier) arguments: (argument_list (identifier))) cause: (identifier))))) (comment) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (comment) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause (comment) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (raise_statement (call function: (identifier) arguments: (argument_list (identifier))))))))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (if_statement condition: (comparison_operator (identifier) (none)) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (raise_statement (call function: (identifier) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) (dictionary_splat (identifier)))) attribute: (identifier)) arguments: (argument_list)))) (comment)) alternative: (else_clause (comment) body: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier)))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)))))))) alternative: (elif_clause condition: (call function: (identifier) arguments: (argument_list (identifier) (attribute object: (identifier) attribute: (identifier)))) consequence: (block (return_statement (identifier)) (comment))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content) (string_end)))) (raise_statement (call function: (identifier) arguments: (argument_list (identifier)))))))))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (dictionary_splat (attribute object: (identifier) attribute: (identifier))))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (return_statement (identifier)))))
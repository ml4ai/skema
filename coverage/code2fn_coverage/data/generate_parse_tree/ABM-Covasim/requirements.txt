(module (expression_statement (string (string_start) (string_content) (string_end))) (comment) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (comment) (comment) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (try_statement body: (block (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier)))) (except_clause (identifier) (comment) (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (raise_statement (call function: (identifier) arguments: (argument_list (identifier))))))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (interpolation expression: (identifier)) (string_content) (string_end)))) (raise_statement (call function: (identifier) arguments: (argument_list (identifier)))))) (return_statement))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (false)) (default_parameter name: (identifier) value: (false))) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (comment) (try_statement body: (block (import_statement name: (dotted_name (identifier))) (return_statement (identifier))) (except_clause (as_pattern (identifier) alias: (as_pattern_target (identifier))) (comment) (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (call function: (identifier) arguments: (argument_list (identifier)))) (string_content (escape_sequence)) (string_end)))) (if_statement condition: (identifier) consequence: (block (raise_statement (call function: (identifier) arguments: (argument_list (identifier))))) alternative: (elif_clause condition: (identifier) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier))))))) (return_statement (false))))) (return_statement))) (comment) (expression_statement (call function: (identifier) arguments: (argument_list))))
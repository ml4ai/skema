(module (expression_statement (string (string_start) (string_content) (string_end))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)))) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)))))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (identifier)) (if_clause (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) (for_in_clause left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) attribute: (identifier)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (unary_operator argument: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) right: (unary_operator argument: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (comment) (comment) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (comment) (for_statement left: (identifier) right: (binary_operator left: (identifier) right: (identifier)) body: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (slice) subscript: (binary_operator left: (identifier) right: (identifier))) right: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (slice)))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (identifier))) right: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (identifier)))))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (dictionary_comprehension body: (pair key: (identifier) value: (false)) (for_in_clause left: (identifier) right: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (true))))) (return_statement))) (comment) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end)))) right: (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end)))) (identifier))) right: (unary_operator argument: (parenthesized_expression (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end)))) (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) body: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (identifier))) right: (parenthesized_expression (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (identifier))) (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (identifier))))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end)))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end)))) right: (binary_operator left: (unary_operator argument: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end))))) right: (unary_operator argument: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end)))) right: (binary_operator left: (parenthesized_expression (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end)))) (identifier))) right: (unary_operator argument: (parenthesized_expression (comparison_operator (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier) subscript: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end)))) (identifier))))))) (expression_statement (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (none)) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))) (for_statement left: (identifier) right: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) (comment) body: (block (expression_statement (assignment left: (identifier) right: (dictionary))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (comment) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)))))))) (comment) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (identifier))) right: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (identifier)))))))) (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (comment) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) (comment) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier))) right: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) right: (not_operator argument: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end)))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) (comment) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier))) right: (comparison_operator (subscript value: (identifier) subscript: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (comment)))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end)))) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end)))) right: (boolean_operator left: (unary_operator argument: (subscript value: (identifier) subscript: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end))))) right: (unary_operator argument: (subscript value: (identifier) subscript: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end)))))))) (comment))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end)))) right: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end)))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) right: (not_operator argument: (parenthesized_expression (comparison_operator (subscript value: (identifier) subscript: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (string (string_start) (string_content) (string_end)))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))) (comment) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer))) (keyword_argument name: (identifier) value: (integer))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (subscript value: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) subscript: (identifier)) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (comparison_operator (identifier) (none)) (comment) consequence: (block (for_statement left: (identifier) right: (list (identifier) (identifier)) body: (block (assert_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (assert_statement (comparison_operator (identifier) (identifier))) (comment) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (try_statement body: (block (assert_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier) (keyword_argument name: (identifier) value: (true))))) (comment)) (except_clause (identifier) (block (if_statement condition: (comparison_operator (identifier) (none)) consequence: (block (assert_statement (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (identifier) (identifier))))))) (comment)) alternative: (else_clause body: (block (assert_statement (comparison_operator (identifier) (identifier) (identifier))) (comment)))))))))))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))
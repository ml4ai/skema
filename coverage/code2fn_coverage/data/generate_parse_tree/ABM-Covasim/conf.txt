(module (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (comment) (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (comparison_operator (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) (string (string_start) (string_content) (string_end))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))))))))) alternative: (else_clause body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (keyword_argument name: (identifier) value: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))))))))))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (identifier))) alias: (as_pattern_target (identifier))))) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (integer)) right: (string (string_start) (string_content (escape_sequence)) (string_end)))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (integer)) right: (string (string_start) (string_content (escape_sequence)) (string_end)))) (comment) (with_statement (with_clause (with_item value: (as_pattern (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))) alias: (as_pattern_target (identifier))))) (comment) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (comment) (comment) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (comment) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (none))))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (true))) (comment) (expression_statement (assignment left: (identifier) right: (true))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (false))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (false))) (comment) (expression_statement (assignment left: (identifier) right: (false))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (interpolation expression: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier))) (string_content (escape_sequence)) (interpolation expression: (attribute object: (identifier) attribute: (identifier))) (string_content (escape_sequence)) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (false))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end)))) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end))) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (comment) (comment) (comment) (comment) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end))))))) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (false))) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (dictionary (comment) (comment) (comment) (comment) (comment) (pair key: (string (string_start) (string_content) (string_end)) value: (concatenated_string (string (string_start) (string_content) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end)))) (comment) (comment) (comment)))) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (list (tuple (identifier) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (list (tuple (identifier) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (list (identifier)) (integer))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (true))) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (list (tuple (identifier) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content (escape_sequence) (escape_sequence)) (interpolation expression: (identifier)) (string_content (escape_sequence) (escape_sequence)) (string_end))))) (expression_statement (assignment left: (identifier) right: (identifier))))
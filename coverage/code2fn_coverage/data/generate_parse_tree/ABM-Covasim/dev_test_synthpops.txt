(module (expression_statement (string (string_start) (string_content) (string_end))) (comment) (import_statement name: (dotted_name (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (try_statement body: (block (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier)))) (except_clause (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (assert_statement (comparison_operator (subscript value: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) subscript: (string (string_start) (string_content) (string_end))) (true))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (expression_statement (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))) (return_statement))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (false))) (comment) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (if_statement condition: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (subscript value: (identifier) subscript: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (call function: (attribute object: (subscript value: (identifier) subscript: (identifier)) attribute: (identifier)) arguments: (argument_list))))) (if_statement condition: (identifier) consequence: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (try_statement body: (block (expression_statement (call function: (attribute object: (subscript value: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) subscript: (integer)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end)))))) (except_clause (block (pass_statement)))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (false))) (comment) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (list (integer)))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (float)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (float))))) alternative: (else_clause body: (block (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier)) right: (integer)))))))))) (return_statement (identifier)))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))) (expression_statement (assignment left: (identifier) right: (lambda parameters: (lambda_parameters (identifier) (identifier)) body: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (identifier))))))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (identifier)) subscript: (string (string_start) (string_content) (string_end))) right: (identifier))) (expression_statement (call function: (attribute object: (subscript value: (identifier) subscript: (identifier)) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (false))))) (comment))) (if_statement condition: (identifier) consequence: (block (for_statement left: (pattern_list (identifier) (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (attribute object: (subscript value: (attribute object: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) attribute: (identifier)) subscript: (integer)) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_end))))))))) (return_statement (identifier)))) (function_definition name: (identifier) parameters: (parameters (default_parameter name: (identifier) value: (false))) (comment) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (interpolation expression: (identifier)) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (string (string_start) (string_content) (string_end))) right: (integer))))) (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (identifier)) (pair key: (string (string_start) (string_content) (string_end)) value: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (if_statement condition: (identifier) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (return_statement (identifier)))) (comment) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (identifier) arguments: (argument_list))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end))))))
(module (comment) (expression_statement (string (string_start) (string_content) (string_end))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (dotted_name (identifier))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (return_statement (subscript value: (parenthesized_expression (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (true) (false)) (list (identifier) (binary_operator left: (integer) right: (identifier))) (keyword_argument name: (identifier) value: (integer))))) subscript: (integer))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (default_parameter name: (identifier) value: (integer)) (default_parameter name: (identifier) value: (integer)) (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end))) (default_parameter name: (identifier) value: (string (string_start) (string_content) (string_end)))) body: (block (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (comment) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (list (float) (float) (float) (float)))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (float))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (list (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (float)) (keyword_argument name: (identifier) value: (integer)))))) (comment) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (subscript value: (parenthesized_expression (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (true))))) subscript: (integer))))) (expression_statement (assignment left: (identifier) right: (list (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (float) right: (integer)))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (float) right: (integer)))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (comment) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list_comprehension body: (subscript value: (identifier) subscript: (integer)) (for_in_clause left: (identifier) right: (identifier))))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list_comprehension body: (subscript value: (identifier) subscript: (integer)) (for_in_clause left: (identifier) right: (identifier))))))) (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (comment) (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (comment))) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (false))) (expression_statement (assignment left: (identifier) right: (list))) (while_statement condition: (not_operator argument: (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (binary_operator left: (identifier) right: (integer)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (integer))) (try_statement body: (block (while_statement condition: (comparison_operator (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (if_statement condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (binary_operator left: (identifier) right: (identifier))) right: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (binary_operator left: (identifier) right: (identifier)))) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (subscript value: (parenthesized_expression (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (integer))))) subscript: (integer))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (augmented_assignment left: (identifier) right: (integer))))))) (expression_statement (assignment left: (identifier) right: (true)))) (except_clause (block (expression_statement (augmented_assignment left: (identifier) right: (integer)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (string (string_start) (string_content) (string_end))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (tuple (integer) (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (parenthesized_expression (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) right: (unary_operator argument: (integer))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (unary_operator argument: (integer)))) (for_statement left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) body: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (for_statement left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier)) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))))) (for_statement left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier)) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (identifier) arguments: (argument_list (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier)))) right: (call function: (identifier) arguments: (argument_list (subscript value: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) subscript: (identifier))))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (float)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)) (identifier))))) (comment)) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) right: (float)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)) (binary_operator left: (integer) right: (identifier))))))))))))) (expression_statement (assignment left: (identifier) right: (dictionary (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer)) (pair key: (string (string_start) (string_content) (string_end)) value: (integer))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (list))) (comment) (for_statement left: (identifier) right: (identifier) (comment) (comment) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (identifier)) right: (integer))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) (comment) consequence: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))))))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (identifier)) right: (integer))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (identifier))) consequence: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (float))) consequence: (block (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (comment)) alternative: (else_clause body: (block (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (identifier)))))) (comment)) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) right: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (identifier)))) (comment) consequence: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (integer) right: (subscript value: (identifier) subscript: (identifier))))))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))))))))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) consequence: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (integer))))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (identifier)) right: (integer))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (comment) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (identifier)))))) (comment)) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) consequence: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end))))))))))))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) consequence: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (integer))))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (identifier)) right: (integer))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (identifier))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (comment) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (identifier))))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) consequence: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (identifier))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))))) alternative: (elif_clause condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (string (string_start) (string_content) (string_end)))))))))))))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (string (string_start) (string_content) (string_end))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (comment) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (identifier) (for_in_clause left: (identifier) right: (identifier)) (if_clause (comparison_operator (identifier) (identifier)))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (integer)) subscript: (subscript value: (identifier) subscript: (integer))))) (comment) (if_statement condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (integer))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) right: (comparison_operator (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (integer))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (comment) consequence: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (integer)))) (comment) consequence: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (parenthesized_expression (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (integer))))) subscript: (integer)))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (integer))) right: (subscript value: (identifier) subscript: (identifier)))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (integer))) right: (subscript value: (parenthesized_expression (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (integer))))) subscript: (integer)))) (comment) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (identifier)) right: (integer))) (comment) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (integer)))))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (integer))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))) right: (comparison_operator (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (integer))) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (comment) consequence: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (integer)))) (comment) consequence: (block (if_statement condition: (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (parenthesized_expression (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (integer))))) subscript: (integer)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (integer))) right: (subscript value: (identifier) subscript: (identifier)))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (subscript value: (identifier) subscript: (integer))) right: (subscript value: (parenthesized_expression (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (integer))))) subscript: (integer)))) (comment) (expression_statement (augmented_assignment left: (subscript value: (identifier) subscript: (identifier)) right: (integer))) (comment) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (integer)))))))))))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (binary_operator left: (identifier) right: (integer)) (string (string_start) (string_content) (string_end)) (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (identifier)) right: (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (identifier)) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (tuple (integer) (identifier)))))) (expression_statement (assignment left: (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (tuple (integer) (identifier)))))))) (return_statement (expression_list (identifier) (identifier))))))
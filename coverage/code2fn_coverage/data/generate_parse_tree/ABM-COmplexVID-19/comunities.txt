(module (comment) (expression_statement (string (string_start) (string_content) (string_end))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_statement name: (aliased_import name: (dotted_name (identifier)) alias: (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_statement name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (comment) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))))) (if_statement condition: (comparison_operator (identifier) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (identifier)))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (integer))))))) alternative: (else_clause body: (block (return_statement (false))))))) (return_statement (identifier)))) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (float)))))))) (comment) (expression_statement (assignment left: (identifier) right: (false))) (while_statement condition: (comparison_operator (identifier) (false)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (keyword_argument name: (identifier) value: (list (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer) (integer))) (keyword_argument name: (identifier) value: (subscript value: (identifier) subscript: (slice))) (keyword_argument name: (identifier) value: (identifier)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))))))) (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (parenthesized_expression (call function: (identifier) arguments: (argument_list (list_comprehension body: (binary_operator left: (identifier) right: (integer)) (for_in_clause left: (identifier) right: (identifier))))))))) (comment))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (comment) (expression_statement (assignment left: (identifier) right: (list))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (call function: (identifier) arguments: (argument_list (identifier)))) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (list (integer)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (call function: (identifier) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (identifier))) right: (float))))) (expression_statement (assignment left: (identifier) right: (parenthesized_expression (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (binary_operator left: (integer) right: (integer)) right: (parenthesized_expression (binary_operator left: (integer) right: (integer))))))) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (parenthesized_expression (binary_operator left: (identifier) right: (identifier)))))) (for_statement left: (identifier) right: (identifier) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (comment) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (binary_operator left: (identifier) right: (integer)))) (comment) body: (block (if_statement condition: (identifier) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (comment) (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier)))) alternative: (else_clause body: (block (break_statement)))))) (comment) (comment) (expression_statement (augmented_assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)) (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (identifier)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (integer))))))))) (expression_statement (augmented_assignment left: (identifier) right: (integer))))) (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (binary_operator left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))))) (comment))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (identifier))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (string (string_start) (string_content) (string_end))))) (return_statement (identifier)))) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (list (integer) (integer)))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (comment) (expression_statement (assignment left: (identifier) right: (list))) (comment) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (integer)) (subscript value: (identifier) subscript: (integer)))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (parenthesized_expression (identifier)))) right: (parenthesized_expression (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (integer))) right: (parenthesized_expression (binary_operator left: (integer) right: (integer)))))) right: (identifier)))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (identifier))) (comment) body: (block (if_statement condition: (identifier) (comment) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (comment)) alternative: (else_clause body: (block (break_statement)))))) (comment) (comment) (expression_statement (augmented_assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)) (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (identifier)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (integer))))))))))) (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)) (binary_operator left: (identifier) right: (parenthesized_expression (identifier)))))) (comment))) (return_statement (identifier)))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))))) (expression_statement (assignment left: (identifier) right: (list (tuple (integer) (integer)) (tuple (integer) (integer)) (tuple (integer) (integer))))) (comment) (expression_statement (assignment left: (identifier) right: (list (float) (float) (float)))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (slice (integer) (identifier))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (integer)))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (integer)) (subscript value: (subscript value: (identifier) subscript: (integer)) subscript: (integer)))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (parenthesized_expression (identifier)))) right: (parenthesized_expression (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (integer) right: (integer)))))) right: (identifier)))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (identifier))) (comment) body: (block (if_statement condition: (identifier) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (comment)) alternative: (else_clause body: (block (break_statement)))))) (comment) (comment) (expression_statement (augmented_assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)) (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (identifier)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (integer))))))))))) (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)) (binary_operator left: (identifier) right: (parenthesized_expression (identifier)))))) (comment))) (return_statement (identifier)))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))))) (expression_statement (assignment left: (identifier) right: (list (integer) (integer)))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (slice (integer) (identifier))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (integer)) (subscript value: (identifier) subscript: (integer)))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (parenthesized_expression (identifier)))) right: (parenthesized_expression (binary_operator left: (parenthesized_expression (binary_operator left: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) right: (integer))) right: (parenthesized_expression (binary_operator left: (integer) right: (integer)))))) right: (identifier)))) (comment) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (identifier))) (comment) body: (block (if_statement condition: (identifier) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (comment)) alternative: (else_clause body: (block (break_statement)))))) (comment) (comment) (expression_statement (augmented_assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)) (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (identifier)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (integer))))))))))) (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)) (binary_operator left: (identifier) right: (parenthesized_expression (identifier)))))) (comment))) (return_statement (identifier)))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (comment) (expression_statement (assignment left: (identifier) right: (list (integer) (integer)))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) right: (parenthesized_expression (binary_operator left: (call function: (identifier) arguments: (argument_list (identifier))) right: (integer)))))))))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (parenthesized_expression (parenthesized_expression (binary_operator left: (integer) right: (parenthesized_expression (binary_operator left: (integer) right: (integer)))))))) right: (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (identifier))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (integer))))))) (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier)))) (comment))) (return_statement (identifier)))) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end)))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (list (integer) (integer)))) (comment) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (comment) (expression_statement (assignment left: (identifier) right: (list))) (comment) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (if_statement condition: (boolean_operator left: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer)) right: (comparison_operator (subscript value: (identifier) subscript: (identifier)) (integer))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (integer))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (identifier) body: (block (expression_statement (augmented_assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (list))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (integer)) (subscript value: (identifier) subscript: (integer)))))) (comment) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (parenthesized_expression (identifier)))) right: (parenthesized_expression (binary_operator left: (parenthesized_expression (binary_operator left: (integer) right: (integer))) right: (parenthesized_expression (binary_operator left: (integer) right: (integer)))))) right: (identifier)))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (identifier))) (comment) body: (block (if_statement condition: (identifier) (comment) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (comment)) alternative: (else_clause body: (block (break_statement)))))) (comment) (comment) (expression_statement (augmented_assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (integer) (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (identifier) right: (integer)) (call function: (identifier) arguments: (argument_list (identifier))))) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (identifier)) (subscript value: (identifier) subscript: (identifier)) (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (integer))))))))))) (if_statement condition: (subscript value: (identifier) subscript: (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier) (string (string_start) (string_content) (string_end)) (binary_operator left: (identifier) right: (parenthesized_expression (identifier)))))) (comment))) (return_statement (identifier)))))
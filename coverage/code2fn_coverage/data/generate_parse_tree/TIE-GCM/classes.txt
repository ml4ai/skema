(module (import_statement name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (comment) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) (comment) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (comment) (comment) (comment) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) (comment) (comment) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (return_statement (string (string_start) (string_content) (string_end)))))))))) (comment) (class_definition name: (identifier) body: (block (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (comment) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier))))) (comment) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier) (identifier)))) (comment))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) (comment) (comment) (comment) (comment) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (for_in_clause left: (identifier) right: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (list))) (comment) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_end)) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (slice (integer))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (identifier) (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer))))) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) consequence: (block (if_statement condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (integer)))) (comment) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (subscript value: (identifier) subscript: (integer)) (string (string_start) (string_end)))))) (comment) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer))))) alternative: (elif_clause condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (integer)))) consequence: (block (continue_statement))) alternative: (else_clause (comment) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (subscript value: (subscript value: (identifier) subscript: (binary_operator left: (identifier) right: (integer))) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (call function: (attribute object: (string (string_start) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))) right: (subscript value: (identifier) subscript: (integer))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (integer))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (identifier) (identifier))))))))))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (integer)) right: (call function: (attribute object: (subscript value: (identifier) subscript: (integer)) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (integer)) right: (call function: (attribute object: (subscript value: (identifier) subscript: (integer)) attribute: (identifier)) arguments: (argument_list)))))) (return_statement (identifier)))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier)) (comment) (comment) (comment) (comment) (comment) body: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (identifier))) (integer)) consequence: (block (return_statement (identifier)))) (expression_statement (assignment left: (identifier) right: (list))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (subscript value: (identifier) subscript: (integer))) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (break_statement))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (identifier) (identifier))))))) (comment) (comment) (comment) (comment) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (subscript value: (identifier) subscript: (integer))) consequence: (block (expression_statement (assignment left: (identifier) right: (integer))) (break_statement))))) (if_statement condition: (not_operator argument: (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (identifier) (identifier))))))))) (comment) (comment) (comment) (comment) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (subscript value: (identifier) subscript: (integer))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))))))) (return_statement (identifier)))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier) (identifier)) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (for_statement left: (identifier) right: (identifier) body: (block (if_statement condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (subscript value: (identifier) subscript: (integer)))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (subscript value: (identifier) subscript: (integer)) right: (string (string_start) (string_content (escape_sequence)) (string_end)))))) (expression_statement (assignment left: (identifier) right: (tuple (string (string_start) (string_content (escape_sequence)) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (concatenated_string (string (string_start) (string_content (escape_sequence)) (string_end)) (string (string_start) (string_content (escape_sequence)) (string_end))))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (integer)))) (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (integer)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)) (identifier))))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (subscript value: (identifier) subscript: (integer)) right: (string (string_start) (string_content) (string_end))) right: (subscript value: (identifier) subscript: (integer))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end))))))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))))) (comment) (comment) (class_definition name: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (comment) (comment) (comment) (comment) (comment) body: (block (if_statement condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) (comment) (comment) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (not_operator argument: (identifier))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (integer))))) (comment) (comment) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (not_operator argument: (identifier))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (integer))))) (comment) (comment) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (not_operator argument: (identifier))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (integer))))) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))) (comment) consequence: (block (if_statement condition: (attribute object: (identifier) attribute: (identifier)) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) alternative: (else_clause (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (integer)) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (subscript value: (identifier) subscript: (integer)) right: (binary_operator left: (subscript value: (identifier) subscript: (integer)) right: (string (string_start) (string_content) (string_end))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (string (string_start) (string_end)) attribute: (identifier)) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier))) consequence: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (attribute object: (identifier) attribute: (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))) alternative: (else_clause body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))))) (comment) (comment) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (not_operator argument: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (comment) (comment) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (not_operator argument: (identifier))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content (escape_sequence)) (string_end))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (integer))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier))) consequence: (block (if_statement condition: (attribute object: (identifier) attribute: (identifier)) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier)))))) alternative: (else_clause body: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))))))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end)))))))) (comment) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier))) consequence: (block (if_statement condition: (attribute object: (identifier) attribute: (identifier)) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end))))))) alternative: (else_clause (comment) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier))) consequence: (block (if_statement condition: (attribute object: (identifier) attribute: (identifier)) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end))))))) alternative: (else_clause (comment) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))) (comment) (comment) (comment) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier))) consequence: (block (if_statement condition: (attribute object: (identifier) attribute: (identifier)) (comment) consequence: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end))))))) alternative: (else_clause (comment) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (string (string_start) (string_content) (string_end)) (identifier)) right: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end)))) consequence: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) alternative: (else_clause body: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end)))))))) (comment) (comment) alternative: (else_clause (comment) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier)))))) (comment))) (comment) (comment) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier)) argument: (string (string_start) (string_content) (string_end)) argument: (identifier)) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (list (attribute object: (identifier) attribute: (identifier)))))))))) (comment) (class_definition name: (identifier) superclasses: (argument_list (identifier) (identifier)) body: (block (function_definition name: (identifier) parameters: (parameters (identifier)) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (line_continuation) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (comment) (comment) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (comment) (comment) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (comment) (comment) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (identifier)) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))))))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (if_statement condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (subscript value: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (call function: (identifier) arguments: (argument_list (identifier)))) subscript: (integer)))) (return_statement (attribute object: (identifier) attribute: (identifier)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_end)))))))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) (comment) (comment) (comment) (comment) body: (block (for_statement left: (identifier) right: (attribute object: (identifier) attribute: (identifier)) body: (block (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (identifier)) (comment) consequence: (block (return_statement (integer)))))) (return_statement (integer)))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) (comment) (comment) (comment) (comment) (comment) (comment) body: (block (try_statement body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier)))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (integer)) right: (comparison_operator (identifier) (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (integer)))) consequence: (block (return_statement (integer))) alternative: (else_clause body: (block (return_statement (integer)))))) (except_clause (block (return_statement (integer))))))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) (comment) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (identifier)))))) (comment) (comment) (comment) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier)) body: (block (print_statement argument: (string (string_start) (string_content (escape_sequence)) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence) (escape_sequence)) (string_end)))) (print_statement argument: (identifier)) (expression_statement (assignment left: (identifier) right: (integer))) (while_statement condition: (comparison_operator (identifier) (attribute object: (identifier) attribute: (identifier))) body: (block (print_statement argument: (identifier) argument: (string (string_start) (string_content (escape_sequence)) (string_end)) argument: (subscript value: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) subscript: (integer)) argument: (string (string_start) (string_content (escape_sequence)) (string_end)) argument: (subscript value: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) subscript: (integer))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))))))) (comment) (comment) (comment) (comment) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment) (comment) (comment) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))))) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_end))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))) (return_statement (identifier)))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) (comment) (comment) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (subscript value: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) subscript: (integer)))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (subscript value: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) subscript: (integer)))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier)))) (comment) (comment) (comment) (comment) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment)) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))))))) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end))))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (integer)) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier)) argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier)) argument: (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment)))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))))))) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))))))) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))))))) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))))))) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))))))) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (integer)) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier)) argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier)) argument: (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))))))) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (integer)) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier)) argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier)) argument: (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (identifier))))) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (comment) (comment) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (comment) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end)))))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (comment) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier) (identifier)))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end)))))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end)))))))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (comment) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (comparison_operator (call function: (identifier) arguments: (argument_list (attribute object: (identifier) attribute: (identifier)))) (integer)) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier)) argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier)) argument: (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (attribute object: (identifier) attribute: (identifier))) (list (string (string_start) (string_content) (string_end)) (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end)))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (comment) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_content) (string_end)))))) (comment) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (list (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end))) (list (string (string_start) (string_content) (string_end)) (string (string_start) (string_end)))))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end)))) (comment)))))))) (comment))
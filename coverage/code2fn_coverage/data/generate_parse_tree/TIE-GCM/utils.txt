(module (import_statement name: (dotted_name (identifier)) name: (dotted_name (identifier))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier)) (comment) (comment) (comment) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier) (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier)) (comment) (comment) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (list_comprehension body: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)) (for_in_clause left: (identifier) right: (identifier))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (comment) (comment) (comment) (comment) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier) (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (integer))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (integer)))) (expression_statement (assignment left: (identifier) right: (integer))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (integer)) (comment) consequence: (block (continue_statement)) alternative: (elif_clause condition: (comparison_operator (identifier) (integer)) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (slice (binary_operator left: (identifier) right: (integer))))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end)))))))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (default_parameter name: (identifier) value: (string (string_start) (string_end)))) (comment) (comment) (comment) (comment) (comment) body: (block (try_statement body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)))) (return_statement (identifier))) (except_clause (identifier) (block (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)) right: (identifier))) (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end)) argument: (identifier)) (return_statement (subscript value: (attribute object: (identifier) attribute: (identifier)) subscript: (identifier)))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_end))))))))))) (comment))
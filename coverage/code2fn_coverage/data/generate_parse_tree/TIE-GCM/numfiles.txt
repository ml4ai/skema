(translation_unit (comment) (function (function_statement (intrinsic_type) name: (name)) (ERROR (identifier) (identifier) (identifier) (identifier) (UNEXPECTED '|') (UNEXPECTED '_')) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (use_statement (module_name) (included_items (identifier) (ERROR (UNEXPECTED '|') (UNEXPECTED '_')) (identifier) (identifier) (identifier) (ERROR (UNEXPECTED '|') (UNEXPECTED '_')) (identifier) (identifier) (identifier))) (implicit_statement (none)) (comment) (comment) (variable_declaration (intrinsic_type) (size (argument_list (keyword_argument name: (identifier) value: (number_literal)))) (type_qualifier) (identifier)) (comment) (variable_declaration (intrinsic_type) (type_qualifier) (ERROR (UNEXPECTED '|') (comment) (UNEXPECTED '|') (comment) (UNEXPECTED '|') (UNEXPECTED '_')) (call_expression (number_literal) (comment) (comment) (ERROR) (argument_list (extent_specifier (identifier) (ERROR) (identifier)) (comment) (comment) (comment) (ERROR) (call_expression (identifier) (argument_list (number_literal))) (identifier) (identifier) (extent_specifier (call_expression (call_expression (identifier) (argument_list (number_literal))) (ERROR) (argument_list (keyword_argument name: (identifier) value: (number_literal)))) (identifier)) (identifier) (call_expression (identifier) (ERROR) (argument_list (keyword_argument name: (identifier) value: (number_literal)))) (extent_specifier (identifier) (call_expression (identifier) (ERROR (UNEXPECTED '_')) (argument_list (number_literal)))) (call_expression (call_expression (call_expression (identifier) (argument_list (number_literal))) (comment) (comment) (ERROR) (argument_list (relational_expression left: (identifier) right: (string_literal)))) (ERROR (comment) (UNEXPECTED '_') (comment) (comment) (comment) (UNEXPECTED '_') (UNEXPECTED '_')) (argument_list (call_expression (identifier) (argument_list (extent_specifier) (identifier))))) (comment) (MISSING ")")))) (assignment_statement left: (identifier) right: (call_expression (identifier) (argument_list (call_expression (identifier) (argument_list (extent_specifier) (identifier)))))) (comment) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (number_literal))) (comment) (assignment_statement left: (identifier) right: (call_expression (identifier) (argument_list (call_expression (identifier) (argument_list (extent_specifier) (identifier)))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (if_statement (parenthesized_expression (relational_expression left: (identifier) right: (number_literal))) (assignment_statement left: (identifier) (ERROR (parenthesized_expression (call_expression (identifier) (argument_list (relational_expression left: (call_expression (identifier) (argument_list (extent_specifier) (identifier))) right: (call_expression (identifier) (argument_list (extent_specifier) (math_expression left: (identifier) right: (number_literal)))))))) (UNEXPECTED '|')) right: (math_expression left: (identifier) right: (identifier))) (end_if_statement)) (comment) (comment) (comment) (comment) (assignment_statement left: (identifier) right: (number_literal)) (comment) (if_statement (parenthesized_expression (logical_expression left: (relational_expression left: (identifier) right: (number_literal)) right: (relational_expression left: (identifier) right: (number_literal)))) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (number_literal)))) (comment) (comment) (comment) (assignment_statement left: (identifier) right: (number_literal)) (comment) (do_loop_statement (block_label_start_expression) (comment) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (number_literal))) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (number_literal))) (if_statement (parenthesized_expression (relational_expression left: (identifier) right: (identifier))) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (number_literal))) (assignment_statement left: (identifier) right: (number_literal)) (end_if_statement)) (comment) (comment) (comment) (comment) (comment) (comment) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (identifier))) (if_statement (parenthesized_expression (relational_expression left: (identifier) right: (identifier))) (keyword_statement (identifier))) (end_do_loop_statement (block_label))) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (identifier))) (comment) (call_expression (identifier) (comment) (comment) (comment) (comment) (comment) (comment) (ERROR) (argument_list (relational_expression left: (identifier) right: (number_literal)))) (ERROR) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (number_literal))) (comment) (comment) (call_expression (identifier) (comment) (comment) (ERROR) (argument_list (relational_expression left: (identifier) right: (string_literal)))) (ERROR) (assignment_statement left: (identifier) right: (number_literal)) (comment) (assignment_statement left: (identifier) right: (number_literal)) (comment) (do_loop_statement (loop_control_expression (identifier) (number_literal) (identifier)) (assignment_statement left: (identifier) right: (call_expression (identifier) (argument_list (call_expression (identifier) (argument_list (extent_specifier) (identifier)))))) (assignment_statement left: (identifier) right: (call_expression (identifier) (argument_list (call_expression (identifier) (argument_list (extent_specifier) (identifier)))))) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (number_literal))) (comment) (assignment_statement left: (identifier) right: (call_expression (identifier) (argument_list (call_expression (identifier) (argument_list (extent_specifier) (identifier)))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (if_statement (parenthesized_expression (relational_expression left: (identifier) right: (number_literal))) (assignment_statement left: (identifier) (ERROR (parenthesized_expression (call_expression (identifier) (argument_list (relational_expression left: (call_expression (identifier) (argument_list (extent_specifier) (identifier))) right: (call_expression (identifier) (argument_list (extent_specifier) (math_expression left: (identifier) right: (number_literal)))))))) (UNEXPECTED '|')) right: (math_expression left: (identifier) right: (identifier))) (end_if_statement)) (assignment_statement left: (identifier) right: (number_literal)) (comment) (assignment_statement left: (identifier) right: (number_literal)) (comment) (do_loop_statement (block_label_start_expression) (comment) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (number_literal))) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (number_literal))) (if_statement (parenthesized_expression (relational_expression left: (identifier) right: (identifier))) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (number_literal))) (assignment_statement left: (identifier) right: (number_literal)) (end_if_statement)) (comment) (comment) (comment) (comment) (comment) (comment) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (identifier))) (if_statement (parenthesized_expression (relational_expression left: (identifier) right: (identifier))) (keyword_statement (identifier))) (end_do_loop_statement (block_label))) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (identifier))) (comment) (end_do_loop_statement)) (comment) (comment) (comment) (ERROR) (write_statement (unit_identifier (number_literal)) (format_identifier (string_literal)) (output_item_list (call_expression (identifier) (argument_list (identifier))))) (subroutine_call subroutine: (identifier) (argument_list (string_literal))) (ERROR (identifier)) (end_function_statement (name))))
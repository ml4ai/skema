(translation_unit (comment) (module (module_statement (name)) (comment) (comment) (comment) (comment) (comment) (use_statement (module_name) (included_items (identifier) (identifier) (identifier) (identifier) (identifier))) (implicit_statement (none)) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (variable_declaration (intrinsic_type) (type_qualifier) (assignment_statement left: (identifier) right: (math_expression left: (math_expression left: (math_expression left: (number_literal) right: (identifier)) right: (number_literal)) right: (number_literal)))) (variable_declaration (intrinsic_type) (call_expression (identifier) (argument_list (identifier)))) (comment) (variable_declaration (intrinsic_type) (call_expression (identifier) (argument_list (number_literal)))) (comment) (internal_procedures (contains_statement) (comment) (subroutine (subroutine_statement name: (name) parameters: (parameters (identifier) (identifier) (identifier) (identifier) (identifier))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (variable_declaration (intrinsic_type) (type_qualifier) (identifier) (identifier) (identifier) (identifier)) (variable_declaration (intrinsic_type) (type_qualifier) (call_expression (identifier) (argument_list (identifier) (extent_specifier (identifier) (identifier))))) (comment) (comment) (variable_declaration (intrinsic_type) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier)) (variable_declaration (intrinsic_type) (call_expression (identifier) (argument_list (identifier) (math_expression left: (number_literal) right: (parenthesized_expression (math_expression left: (math_expression left: (identifier) right: (identifier)) right: (number_literal)))))) (ERROR (UNEXPECTED '|')) (assignment_statement left: (parenthesized_expression (math_expression left: (math_expression left: (parenthesized_expression (math_expression left: (identifier) right: (number_literal))) right: (number_literal)) right: (parenthesized_expression (math_expression left: (math_expression left: (identifier) right: (identifier)) right: (number_literal))))) (comment) (ERROR) right: (math_expression left: (math_expression left: (identifier) right: (identifier)) right: (number_literal)))) (assignment_statement left: (identifier) right: (math_expression left: (math_expression left: (number_literal) right: (identifier)) right: (number_literal))) (comment) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (number_literal))) (if_statement (parenthesized_expression (relational_expression left: (identifier) right: (identifier))) (comment) (comment) (keyword_statement) (end_if_statement)) (comment) (comment) (assignment_statement left: (call_expression (identifier) (argument_list (extent_specifier) (extent_specifier))) right: (number_literal)) (do_loop_statement (loop_control_expression (identifier) (identifier) (identifier)) (do_loop_statement (loop_control_expression (identifier) (number_literal) (identifier)) (assignment_statement left: (call_expression (identifier) (argument_list (identifier) (identifier))) right: (call_expression (identifier) (argument_list (math_expression left: (identifier) right: (number_literal)) (identifier)))) (end_do_loop_statement)) (end_do_loop_statement)) (comment) (comment) (comment) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (parenthesized_expression (math_expression left: (number_literal) right: (parenthesized_expression (math_expression left: (math_expression left: (identifier) right: (identifier)) right: (number_literal))))))) (assignment_statement left: (identifier) right: (math_expression left: (math_expression left: (parenthesized_expression (math_expression left: (identifier) right: (number_literal))) right: (number_literal)) right: (parenthesized_expression (math_expression left: (math_expression left: (identifier) right: (identifier)) right: (number_literal))))) (subroutine_call subroutine: (identifier) (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (number_literal) (identifier) (identifier) (identifier) (ERROR (UNEXPECTED '|')) (unary_expression argument: (number_literal)))) (comment) (comment) (do_loop_statement (loop_control_expression (identifier) (number_literal) (identifier)) (do_loop_statement (loop_control_expression (identifier) (identifier) (identifier)) (assignment_statement left: (call_expression (identifier) (argument_list (identifier) (identifier))) right: (number_literal)) (end_do_loop_statement)) (end_do_loop_statement)) (comment) (comment) (subroutine_call subroutine: (identifier) (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (number_literal) (identifier) (identifier) (identifier) (ERROR (UNEXPECTED '|')) (number_literal))) (comment) (comment) (do_loop_statement (loop_control_expression (identifier) (identifier) (identifier)) (do_loop_statement (loop_control_expression (identifier) (number_literal) (identifier)) (assignment_statement left: (call_expression (identifier) (argument_list (math_expression left: (identifier) right: (number_literal)) (identifier))) right: (call_expression (identifier) (argument_list (identifier) (identifier)))) (end_do_loop_statement)) (end_do_loop_statement)) (end_subroutine_statement (name))) (comment) (ERROR) (subroutine (subroutine_statement name: (name) parameters: (parameters (identifier) (identifier) (identifier) (identifier) (identifier))) (use_statement (module_name) (included_items (identifier))) (use_statement (module_name) (included_items (identifier) (identifier))) (comment) (comment) (variable_declaration (intrinsic_type) (type_qualifier) (identifier) (identifier) (identifier) (identifier)) (variable_declaration (intrinsic_type) (type_qualifier) (call_expression (identifier) (argument_list (identifier) (extent_specifier (identifier) (identifier))))) (comment) (comment) (variable_declaration (intrinsic_type) (call_expression (identifier) (argument_list (identifier))) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (call_expression (identifier) (argument_list (identifier)))) (variable_declaration (intrinsic_type) (call_expression (identifier) (argument_list (identifier) (math_expression left: (number_literal) right: (parenthesized_expression (math_expression left: (math_expression left: (identifier) right: (identifier)) right: (number_literal))))))) (ERROR (ERROR (UNEXPECTED '|')) (parenthesized_expression (math_expression left: (math_expression left: (parenthesized_expression (math_expression left: (identifier) right: (number_literal))) right: (number_literal)) right: (parenthesized_expression (math_expression left: (math_expression left: (identifier) right: (identifier)) right: (number_literal)))))) (variable_declaration (intrinsic_type) (identifier)) (comment) (variable_declaration (intrinsic_type) (identifier)) (comment) (comment) (comment) (ERROR) (if_statement (parenthesized_expression (relational_expression left: (relational_expression left: (identifier) right: (number_literal)) (ERROR) right: (number_literal))) (assignment_statement left: (identifier) right: (array_literal (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (ERROR (UNEXPECTED '|')) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal)))) (comment) (ERROR) (if_statement (parenthesized_expression (relational_expression left: (relational_expression left: (identifier) right: (number_literal)) (ERROR) right: (number_literal))) (assignment_statement left: (identifier) right: (array_literal (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (ERROR (UNEXPECTED '|')) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (ERROR (UNEXPECTED '|')) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (ERROR (UNEXPECTED '|')) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal)))) (comment) (ERROR (comment)) (if_statement (parenthesized_expression (relational_expression left: (relational_expression left: (identifier) right: (number_literal)) (ERROR) right: (number_literal))) (assignment_statement left: (identifier) right: (array_literal (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (ERROR (UNEXPECTED '|')) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (ERROR (UNEXPECTED '|')) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal)))) (comment) (ERROR) (if_statement (parenthesized_expression (relational_expression left: (relational_expression left: (identifier) right: (number_literal)) (ERROR) right: (number_literal))) (assignment_statement left: (identifier) right: (array_literal (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (ERROR (UNEXPECTED '|')) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (ERROR (UNEXPECTED '|')) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (ERROR (UNEXPECTED '|')) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal) (number_literal)))) (ERROR (comment) (comment)) (comment) (comment) (assignment_statement left: (identifier) right: (math_expression left: (math_expression left: (identifier) right: (identifier)) right: (number_literal))) (do_loop_statement (loop_control_expression (identifier) (identifier) (identifier)) (do_loop_statement (loop_control_expression (identifier) (number_literal) (identifier)) (assignment_statement left: (call_expression (identifier) (argument_list (identifier) (identifier))) right: (call_expression (identifier) (argument_list (math_expression left: (identifier) right: (number_literal)) (identifier)))) (end_do_loop_statement)) (do_loop_statement (loop_control_expression (identifier) (identifier) (identifier)) (assignment_statement left: (call_expression (identifier) (argument_list (identifier) (identifier))) right: (number_literal)) (end_do_loop_statement)) (end_do_loop_statement)) (comment) (comment) (comment) (comment) (comment) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (parenthesized_expression (math_expression left: (number_literal) right: (parenthesized_expression (math_expression left: (math_expression left: (identifier) right: (identifier)) right: (number_literal))))))) (assignment_statement left: (identifier) right: (math_expression left: (math_expression left: (parenthesized_expression (math_expression left: (identifier) right: (number_literal))) right: (number_literal)) right: (parenthesized_expression (math_expression left: (math_expression left: (identifier) right: (identifier)) right: (number_literal))))) (subroutine_call subroutine: (identifier) (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (number_literal) (identifier) (identifier) (identifier) (ERROR (UNEXPECTED '|')) (unary_expression argument: (number_literal)))) (comment) (comment) (comment) (comment) (comment) (assignment_statement left: (identifier) right: (math_expression left: (math_expression left: (number_literal) right: (parenthesized_expression (math_expression left: (call_expression (identifier) (argument_list (identifier))) right: (number_literal)))) right: (number_literal))) (comment) (comment) (comment) (comment) (do_loop_statement (loop_control_expression (identifier) (identifier) (identifier)) (do_loop_statement (loop_control_expression (identifier) (identifier) (identifier)) (assignment_statement left: (identifier) right: (call_expression (identifier) (argument_list (math_expression left: (math_expression left: (parenthesized_expression (math_expression left: (parenthesized_expression (math_expression left: (math_expression left: (identifier) right: (number_literal)) right: (identifier))) right: (number_literal))) right: (identifier)) right: (number_literal))))) (if_statement (parenthesized_expression (relational_expression left: (identifier) right: (number_literal))) (assignment_statement left: (identifier) right: (math_expression left: (identifier) right: (parenthesized_expression (math_expression left: (number_literal) right: (call_expression (identifier) (argument_list (identifier))))))) (assignment_statement left: (call_expression (identifier) (argument_list (math_expression left: (identifier) right: (number_literal)) (identifier))) right: (math_expression left: (call_expression (identifier) (argument_list (math_expression left: (identifier) right: (number_literal)) (identifier))) right: (identifier))) (else_clause (assignment_statement left: (call_expression (identifier) (argument_list (math_expression left: (identifier) right: (number_literal)) (identifier))) right: (number_literal))) (end_if_statement)) (end_do_loop_statement)) (comment) (end_do_loop_statement)) (comment) (comment) (comment) (subroutine_call subroutine: (identifier) (argument_list (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (identifier) (number_literal) (identifier) (identifier) (identifier) (ERROR (UNEXPECTED '|')) (unary_expression argument: (number_literal)))) (comment) (comment) (do_loop_statement (loop_control_expression (identifier) (identifier) (identifier)) (do_loop_statement (loop_control_expression (identifier) (number_literal) (identifier)) (assignment_statement left: (call_expression (identifier) (argument_list (math_expression left: (identifier) right: (number_literal)) (identifier))) right: (call_expression (identifier) (argument_list (identifier) (identifier)))) (end_do_loop_statement)) (comment) (end_do_loop_statement)) (comment) (end_subroutine_statement (name)))) (comment) (end_module_statement (name))))
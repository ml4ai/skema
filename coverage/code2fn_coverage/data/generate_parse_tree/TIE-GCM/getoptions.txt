(module (import_statement name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier)) name: (dotted_name (identifier))) (import_from_statement module_name: (dotted_name (identifier)) name: (dotted_name (identifier))) (comment) (function_definition name: (identifier) parameters: (parameters) body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end)))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (keyword_argument name: (identifier) value: (identifier)) (keyword_argument name: (identifier) value: (attribute object: (identifier) attribute: (identifier))))))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content (escape_sequence)) (string_end)))) (expression_statement (assignment left: (identifier) right: (list (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier)) (list (string (string_start) (string_content) (string_end)) (identifier))))) (for_statement left: (identifier) right: (identifier) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (binary_operator left: (string (string_start) (string_content) (string_end)) right: (subscript value: (identifier) subscript: (integer))) (keyword_argument name: (identifier) value: (subscript value: (identifier) subscript: (integer)))))))) (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (comment) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier) (identifier) (identifier)) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) body: (block (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (attribute object: (identifier) attribute: (identifier)) (comment) consequence: (block (return_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (attribute object: (identifier) attribute: (identifier))))))) (if_statement condition: (identifier) (comment) consequence: (block (if_statement condition: (not_operator argument: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end)) argument: (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (integer)) argument: (string (string_start) (string_content) (string_end))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) alternative: (else_clause body: (block (return_statement (identifier)))))) alternative: (else_clause (comment) body: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (while_statement condition: (not_operator argument: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (comment) (comment) (comment) (comment) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (binary_operator left: (string (string_start) (string_content (escape_sequence)) (string_end)) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (integer))))) right: (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (comment)) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_end))) consequence: (block (return_statement (integer)) (comment))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment))) alternative: (else_clause body: (block (if_statement condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) (comment) consequence: (block (return_statement (identifier))) alternative: (else_clause body: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end)) argument: (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (integer)) argument: (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (comment))))))))))))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (if_statement condition: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier))) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier)))) alternative: (else_clause body: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))))))) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier)))) alternative: (else_clause body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (while_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (continue_statement))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier))))))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier)))))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier)) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))))) (return_statement (identifier))) (comment) (comment) (comment) alternative: (else_clause body: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier)))) (comment) (comment) (comment) (comment) alternative: (else_clause body: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_end))) consequence: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier)))) (comment))) (expression_statement (assignment left: (identifier) right: (identifier))) (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier))))) (comment) (comment) (comment) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier)) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier)))) (comment))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end))) (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier)))) (comment))) (return_statement (identifier))))))) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (while_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))) (expression_statement (assignment left: (identifier) right: (identifier))))) alternative: (elif_clause condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier)))))))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier)) (print_statement argument: (string (string_start) (string_content) (string_end))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier)))) alternative: (else_clause body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_end)))) (for_statement left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))) body: (block (expression_statement (assignment left: (identifier) right: (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end))))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (identifier) (integer)) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end))))))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_end))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))))) (return_statement (attribute object: (identifier) attribute: (identifier))))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end))) (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (if_statement condition: (boolean_operator left: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier)) (print_statement argument: (string (string_start) (string_content) (string_end))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (return_statement (identifier))) alternative: (else_clause (comment) body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) (comment) consequence: (block (return_statement (identifier))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)))))) (comment) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_end))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))) (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier))) (return_statement (identifier))) alternative: (else_clause (comment) body: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))))))) (if_statement condition: (not_operator argument: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier))) consequence: (block (expression_statement (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier)))) alternative: (else_clause body: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier)) argument: (string (string_start) (string_content) (string_end)))))) (return_statement (identifier)))))))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (return_statement (identifier))) alternative: (else_clause body: (block (return_statement (string (string_start) (string_content) (string_end)))))))) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier)) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (assignment left: (identifier) right: (identifier)))) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_end)))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (string (string_start) (string_content) (string_end)) (keyword_argument name: (identifier) value: (identifier)))))) (if_statement condition: (identifier) consequence: (block (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier)) (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (attribute object: (identifier) attribute: (identifier))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier))))))) alternative: (else_clause body: (block (print_statement argument: (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (binary_operator left: (binary_operator left: (binary_operator left: (binary_operator left: (string (string_start) (string_content) (string_end)) right: (attribute object: (identifier) attribute: (identifier))) right: (string (string_start) (string_content) (string_end))) right: (identifier)) right: (string (string_start) (string_content) (string_end))))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (if_statement condition: (comparison_operator (identifier) (string (string_start) (string_end))) consequence: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (attribute object: (identifier) attribute: (identifier))))) alternative: (else_clause body: (block (expression_statement (call function: (identifier) arguments: (argument_list (identifier) (identifier) (identifier) (identifier))))))))))))) (return_statement (identifier)))) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (try_statement body: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier)))))) (except_clause (block (print_statement argument: (string (string_start) (string_content (escape_sequence)) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list)))))) (return_statement (attribute object: (identifier) attribute: (identifier))))))) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))))) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))))) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))))) (comment) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))))) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (if_statement condition: (boolean_operator left: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) right: (comparison_operator (identifier) (string (string_start) (string_content) (string_end)))) consequence: (block (print_statement argument: (string (string_start) (string_content (escape_sequence)) (string_end)) argument: (identifier) argument: (string (string_start) (string_content) (string_end))) (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))))) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (comment) (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier))) alternative: (else_clause (comment) body: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier))))) (expression_statement (assignment left: (attribute object: (identifier) attribute: (identifier)) right: (identifier))) (return_statement (attribute object: (identifier) attribute: (identifier))))))) (comment) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (string (string_start) (string_content) (string_end))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier)))) alternative: (else_clause (comment) body: (block (expression_statement (assignment left: (identifier) right: (binary_operator left: (binary_operator left: (attribute object: (identifier) attribute: (identifier)) right: (string (string_start) (string_content) (string_end))) right: (identifier))))))) (if_statement condition: (not_operator argument: (call function: (attribute object: (attribute object: (identifier) attribute: (identifier)) attribute: (identifier)) arguments: (argument_list (identifier)))) consequence: (block (expression_statement (call function: (attribute object: (identifier) attribute: (identifier)) arguments: (argument_list (identifier)))) (comment) (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier))) alternative: (else_clause (comment) body: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier))))) (if_statement condition: (comparison_operator (subscript value: (identifier) subscript: (integer)) (string (string_start) (string_content) (string_end))) (comment) consequence: (block (expression_statement (assignment left: (identifier) right: (identifier))) (comment))) (expression_statement (assignment left: (identifier) right: (binary_operator left: (identifier) right: (string (string_start) (string_content) (string_end))))) (comment)) alternative: (else_clause body: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end))))))) (return_statement (identifier)))) (comment) (comment) (comment) alternative: (elif_clause condition: (comparison_operator (identifier) (string (string_start) (string_content) (string_end))) consequence: (block (if_statement condition: (identifier) consequence: (block (return_statement (identifier))) alternative: (else_clause body: (block (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (if_statement condition: (comparison_operator (attribute object: (identifier) attribute: (identifier)) (string (string_start) (string_content) (string_end))) consequence: (block (expression_statement (assignment left: (identifier) right: (string (string_start) (string_content) (string_end)))))) (return_statement (identifier))))))) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) (comment) alternative: (else_clause body: (block (print_statement argument: (string (string_start) (string_content) (string_end)) argument: (identifier)) (return_statement (none))))))) (comment))
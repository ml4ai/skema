(module (expression_statement (string (string_start) (string_content) (string_end))) (import_from_statement module_name: (dotted_name (identifier) (identifier)) name: (dotted_name (identifier))) (expression_statement (assignment left: (identifier) right: (list (string (string_start) (string_content) (string_end))))) (function_definition name: (identifier) parameters: (parameters (identifier) (identifier)) body: (block (expression_statement (string (string_start) (string_content) (string_end))) (expression_statement (assignment left: (identifier) right: (dictionary))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (expression_statement (assignment left: (identifier) right: (call function: (identifier) arguments: (argument_list (identifier))))) (comment) (for_statement left: (identifier) right: (binary_operator left: (identifier) right: (identifier)) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (identifier)))))) (comment) (for_statement left: (identifier) right: (binary_operator left: (identifier) right: (identifier)) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (subscript value: (identifier) subscript: (identifier)))))) (comment) (for_statement left: (identifier) right: (binary_operator left: (identifier) right: (identifier)) body: (block (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (expression_statement (assignment left: (identifier) right: (subscript value: (identifier) subscript: (identifier)))) (if_statement condition: (parenthesized_expression (boolean_operator left: (call function: (identifier) arguments: (argument_list (identifier) (identifier))) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier))))) (comment) consequence: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (call function: (identifier) arguments: (argument_list (identifier) (identifier)))))) alternative: (else_clause (comment) body: (block (expression_statement (assignment left: (subscript value: (identifier) subscript: (identifier)) right: (identifier)))))))) (return_statement (identifier)))))